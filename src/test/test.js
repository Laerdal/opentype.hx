// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["promhx"] = $hx_exports["promhx"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AsyncTools = function() { };
AsyncTools.__name__ = "AsyncTools";
AsyncTools.aMapLimit = function(iterable,limit,cb,done) {
	AsyncTools.aForEachOfMapLimit(iterable,limit,function(item,_,done1) {
		cb(item,done1);
	},done);
};
AsyncTools.aMap = function(iterable,cb,done) {
	AsyncTools.aMapLimit(iterable,0,cb,done);
};
AsyncTools.aMapSeries = function(iterable,cb,done) {
	AsyncTools.aMapLimit(iterable,1,cb,done);
};
AsyncTools.aEachLimit = function(iterable,limit,cb,done) {
	AsyncTools.aMapLimit(iterable,limit,function(item,done1) {
		cb(item,function(err) {
			done1(err,true);
		});
	},function(err1,items) {
		done(err1);
	});
};
AsyncTools.aEach = function(iterable,cb,done) {
	AsyncTools.aEachLimit(iterable,0,cb,done);
};
AsyncTools.aEachSeries = function(iterable,cb,done) {
	AsyncTools.aEachLimit(iterable,1,cb,done);
};
AsyncTools.aFilterLimit = function(iterable,limit,cb,done) {
	AsyncTools.aMapLimit(iterable,limit,function(item,done1) {
		cb(item,function(err,keep) {
			if(err != null) {
				done1(err,null);
			} else {
				done1(null,keep ? haxe_ds_Option.Some(item) : haxe_ds_Option.None);
			}
		});
	},function(err1,results) {
		if(err1 != null) {
			done(err1,null);
		} else {
			var _g = [];
			var _g1 = 0;
			var _g2 = results;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(!Type.enumEq(v,haxe_ds_Option.None)) {
					_g.push(v);
				}
			}
			var _this = _g;
			var result = new Array(_this.length);
			var _g3 = 0;
			var _g11 = _this.length;
			while(_g3 < _g11) {
				var i = _g3++;
				result[i] = Type.enumParameters(_this[i])[0];
			}
			done(null,result);
		}
	});
};
AsyncTools.aFilter = function(iterable,cb,done) {
	AsyncTools.aFilterLimit(iterable,0,cb,done);
};
AsyncTools.aFilterSeries = function(iterable,cb,done) {
	AsyncTools.aFilterLimit(iterable,1,cb,done);
};
AsyncTools.aForEachOfMapLimit = function(iterable,limit,cb,done) {
	var complete_h = { };
	var it = $getIterator(iterable);
	var completed = false;
	var running = 0;
	var pos = 0;
	var completedItems = function() {
		var currentPos = pos;
		var _g = [];
		var _g1 = 0;
		var _g2 = currentPos;
		while(_g1 < _g2) {
			var key = _g1++;
			_g.push(complete_h[key]);
		}
		var output = _g;
		return output;
	};
	var next = null;
	next = function() {
		if(!completed) {
			if(!it.hasNext()) {
				if(running <= 0) {
					if(!completed) {
						completed = true;
						var next1 = completedItems();
						done(null,next1);
					}
				}
			} else {
				var nextItem = it.next();
				pos += 1;
				var currentPos1 = pos - 1;
				running += 1;
				cb(nextItem,currentPos1,function(err,mapped) {
					if(!completed) {
						if(err != null) {
							if(!completed) {
								completed = true;
								var next2 = completedItems();
								done(err,next2);
							}
						} else {
							running -= 1;
							complete_h[currentPos1] = mapped;
							next();
						}
					}
				});
				if(!completed) {
					if(limit == 0 || running < limit) {
						next();
					}
				}
			}
		}
	};
	next();
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			_g.push(x1);
		}
	}
	return _g;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
var buddy_Buddy = function() { };
buddy_Buddy.__name__ = "buddy.Buddy";
buddy_Buddy.__isInterface__ = true;
var Main = function() { };
Main.__name__ = "Main";
Main.__interfaces__ = [buddy_Buddy];
Main.main = function() {
	var testsDone = false;
	var runner = new buddy_SuitesRunner([new TestParser(),new tables_GposTable(),new tables_LocaTable(),new TestLayout(),new TestOpenType()],new buddy_reporting_ConsoleColorReporter());
	var oldTrace = haxe_Log.trace;
	var outputError = function() {
		haxe_Log.trace = oldTrace;
		var pos = { fileName : "Buddy", lineNumber : 0, className : "", methodName : ""};
		haxe_Log.trace(runner.unrecoverableError,pos);
		var stack = runner.unrecoverableErrorStack;
		if(stack == null || stack.length == 0) {
			return;
		}
		var _g = 0;
		while(_g < stack.length) {
			var s = stack[_g];
			++_g;
			if(s._hx_index == 2) {
				var _g3 = s.column;
				var _g1 = s.s;
				var line = s.line;
				var file = s.file;
				if(line > 0) {
					haxe_Log.trace(file + ":" + line,pos);
				}
			}
		}
	};
	var startRun = function(done) {
		var r = runner.run();
		r.then(function(_) {
			if(runner.unrecoverableError != null) {
				outputError();
			}
			done();
		});
	};
	process.on("uncaughtException",function(err) {
		runner.haveUnrecoverableError(err);
	});
	startRun(function() {
		process.exit(runner.statusCode());
	});
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var buddy_BuddySuite = function() {
	this.timeoutMs = 5000;
	this.suite = this.currentSuite = new buddy_TestSuite("");
	this.describeQueue = [];
};
buddy_BuddySuite.__name__ = "buddy.BuddySuite";
buddy_BuddySuite.prototype = {
	describe: function(description,spec,_hasInclude) {
		if(_hasInclude == null) {
			_hasInclude = false;
		}
		var suite = new buddy_TestSuite(description);
		this.currentSuite.specs.add(buddy_TestSpec.Describe(suite,_hasInclude));
		this.describeQueue.push({ suite : suite, spec : spec});
	}
	,xdescribe: function(description,spec,_hasInclude) {
		if(_hasInclude == null) {
			_hasInclude = false;
		}
	}
	,before: function(init) {
		this.beforeEach(init);
	}
	,after: function(init) {
		this.afterEach(init);
	}
	,beforeEach: function(init) {
		this.currentSuite.beforeEach.add(init);
	}
	,beforeAll: function(init) {
		this.currentSuite.beforeAll.add(init);
	}
	,afterEach: function(init) {
		this.currentSuite.afterEach.add(init);
	}
	,afterAll: function(init) {
		this.currentSuite.afterAll.add(init);
	}
	,it: function(desc,spec,_hasInclude,pos,time) {
		if(time == null) {
			time = 0;
		}
		if(_hasInclude == null) {
			_hasInclude = false;
		}
		if(this.currentSuite == this.suite) {
			throw new js__$Boot_HaxeError("Cannot use 'it' outside of a describe block.");
		}
		this.currentSuite.specs.add(buddy_TestSpec.It(desc,spec,_hasInclude,pos,time));
	}
	,xit: function(desc,spec,_hasInclude,pos,time) {
		if(time == null) {
			time = 0;
		}
		if(_hasInclude == null) {
			_hasInclude = false;
		}
		if(this.currentSuite == this.suite) {
			throw new js__$Boot_HaxeError("Cannot use 'it' outside of a describe block.");
		}
		this.currentSuite.specs.add(buddy_TestSpec.It(desc,null,_hasInclude,pos,time));
	}
	,__class__: buddy_BuddySuite
};
var TestLayout = function() {
	var _gthis = this;
	buddy_BuddySuite.call(this);
	this.describe("layout.js",buddy_TestFunc.Sync(function() {
		var font;
		var layout;
		var notdefGlyph = new opentype_Glyph(new opentype_GlyphOptions(".notdef",null,0,null,null));
		var defaultLayoutTable = new TestLayoutTable(1,[],[],[]);
		var _this = "abcdefghijklmnopqrstuvwxyz".split("");
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = _this[i];
			result[i] = new opentype_Glyph(new opentype_GlyphOptions(c,null,HxOverrides.cca(c,0),null,null));
		}
		var glyphs = [notdefGlyph].concat(result);
		var tmp = buddy_TestFunc.Sync(function() {
			font = new opentype_Font(new opentype_FontOptions(new opentype_FontNames("MyFont",null,"Medium",null,null,null,null,null,null,null,null,null,null,null,null),1000,800,-200,null,null,null,null,glyphs,null));
			layout = new opentype_Layout(font,"gsub");
			layout.createDefaultTable = function() {
				return defaultLayoutTable;
			};
		});
		_gthis.beforeEach(tmp);
		var tmp1 = buddy_TestFunc.Sync(function() {
			var tmp2 = buddy_TestFunc.Sync(function() {
				buddy_ShouldDynamic.should(layout.getTable()).be(null,{ fileName : "TestLayout.hx", lineNumber : 48, className : "TestLayout", methodName : "new"});
				buddy_ShouldDynamic.should(layout.getTable(false)).be(null,{ fileName : "TestLayout.hx", lineNumber : 49, className : "TestLayout", methodName : "new"});
			});
			_gthis.it("must not always create an empty default layout table",tmp2,null,{ fileName : "TestLayout.hx", lineNumber : 47, className : "TestLayout", methodName : "new"});
			var tmp3 = buddy_TestFunc.Sync(function() {
				buddy_ShouldFloat.should(layout.getTable(true).version).be(defaultLayoutTable.version,{ fileName : "TestLayout.hx", lineNumber : 53, className : "TestLayout", methodName : "new"});
				buddy_ShouldIterable.should(layout.getTable(true).scripts).containExactly(defaultLayoutTable.scripts,{ fileName : "TestLayout.hx", lineNumber : 54, className : "TestLayout", methodName : "new"});
				buddy_ShouldIterable.should(layout.getTable(true).lookups).containExactly(defaultLayoutTable.lookups,{ fileName : "TestLayout.hx", lineNumber : 55, className : "TestLayout", methodName : "new"});
				buddy_ShouldIterable.should(layout.getTable(true).features).containExactly(defaultLayoutTable.features,{ fileName : "TestLayout.hx", lineNumber : 56, className : "TestLayout", methodName : "new"});
			});
			_gthis.it("must create an empty default layout table on demand",tmp3,null,{ fileName : "TestLayout.hx", lineNumber : 52, className : "TestLayout", methodName : "new"});
		});
		_gthis.describe("getTable",tmp1);
		var tmp4 = buddy_TestFunc.Sync(function() {
			var tmp5 = buddy_TestFunc.Sync(function() {
				buddy_ShouldDynamic.should(layout.getScriptTable("DFLT")).be(null,{ fileName : "TestLayout.hx", lineNumber : 61, className : "TestLayout", methodName : "new"});
				buddy_ShouldDynamic.should(layout.getScriptTable("DFLT",false)).be(null,{ fileName : "TestLayout.hx", lineNumber : 62, className : "TestLayout", methodName : "new"});
			});
			_gthis.it("must not create a new script table if it does not exist",tmp5,null,{ fileName : "TestLayout.hx", lineNumber : 60, className : "TestLayout", methodName : "new"});
			var tmp6 = buddy_TestFunc.Sync(function() {
				var scriptTable = layout.getScriptTable("DFLT",true);
				buddy_ShouldDynamic.should(scriptTable).get_not().be(null,{ fileName : "TestLayout.hx", lineNumber : 67, className : "TestLayout", methodName : "new"});
				buddy_ShouldDynamic.should(scriptTable.defaultLangSys).get_not().be(null,{ fileName : "TestLayout.hx", lineNumber : 68, className : "TestLayout", methodName : "new"});
				buddy_ShouldDynamic.should(layout.getScriptTable("DFLT",true)).be(scriptTable,{ fileName : "TestLayout.hx", lineNumber : 69, className : "TestLayout", methodName : "new"});
			});
			_gthis.it("must create an new script table only on demand and if it does not exist",tmp6,null,{ fileName : "TestLayout.hx", lineNumber : 65, className : "TestLayout", methodName : "new"});
		});
		_gthis.describe("getScriptTable",tmp4);
		var tmp7 = buddy_TestFunc.Sync(function() {
			var classDef1 = new opentype_tables_subtables_ClassDefinition(1,50,[0,1,0,1,0,1,2,1,0,2,1,1,0,0,0,2,2,0,0,1,0,0,0,0,2,1],null);
			var classDef2 = new opentype_tables_subtables_ClassDefinition(2,null,null,[new opentype_tables_subtables_RangeRecord(70,71,2),new opentype_tables_subtables_RangeRecord(73,73,2),new opentype_tables_subtables_RangeRecord(210,211,1)]);
			var tmp8 = buddy_TestFunc.Sync(function() {
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef1,50)).be(0,{ fileName : "TestLayout.hx", lineNumber : 94, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef1,51)).be(1,{ fileName : "TestLayout.hx", lineNumber : 95, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef1,52)).be(0,{ fileName : "TestLayout.hx", lineNumber : 96, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef1,56)).be(2,{ fileName : "TestLayout.hx", lineNumber : 97, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef1,74)).be(2,{ fileName : "TestLayout.hx", lineNumber : 98, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef1,75)).be(1,{ fileName : "TestLayout.hx", lineNumber : 99, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef1,49)).be(0,{ fileName : "TestLayout.hx", lineNumber : 102, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef1,80)).be(0,{ fileName : "TestLayout.hx", lineNumber : 103, className : "TestLayout", methodName : "new"});
			});
			_gthis.it("should find a glyph class in a format 1 class definition table",tmp8,null,{ fileName : "TestLayout.hx", lineNumber : 93, className : "TestLayout", methodName : "new"});
			var tmp9 = buddy_TestFunc.Sync(function() {
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,70)).be(2,{ fileName : "TestLayout.hx", lineNumber : 107, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,71)).be(2,{ fileName : "TestLayout.hx", lineNumber : 108, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,73)).be(2,{ fileName : "TestLayout.hx", lineNumber : 109, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,210)).be(1,{ fileName : "TestLayout.hx", lineNumber : 110, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,211)).be(1,{ fileName : "TestLayout.hx", lineNumber : 111, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,69)).be(0,{ fileName : "TestLayout.hx", lineNumber : 114, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,72)).be(0,{ fileName : "TestLayout.hx", lineNumber : 115, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,74)).be(0,{ fileName : "TestLayout.hx", lineNumber : 116, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getGlyphClass(classDef2,212)).be(0,{ fileName : "TestLayout.hx", lineNumber : 117, className : "TestLayout", methodName : "new"});
			});
			_gthis.it("should find a glyph class in a format 2 class definition table",tmp9,null,{ fileName : "TestLayout.hx", lineNumber : 106, className : "TestLayout", methodName : "new"});
		});
		_gthis.describe("getGlyphClass",tmp7);
		var tmp10 = buddy_TestFunc.Sync(function() {
			var cov1 = new opentype_tables_subtables_Coverage(1,null,[79,293,297]);
			var cov2 = new opentype_tables_subtables_Coverage(2,[new opentype_tables_subtables_RangeRecord(6,6,0),new opentype_tables_subtables_RangeRecord(11,11,1),new opentype_tables_subtables_RangeRecord(16,16,2),new opentype_tables_subtables_RangeRecord(18,18,3),new opentype_tables_subtables_RangeRecord(37,41,4),new opentype_tables_subtables_RangeRecord(44,52,9),new opentype_tables_subtables_RangeRecord(56,62,18)],null);
			var tmp11 = buddy_TestFunc.Sync(function() {
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov1,79)).be(0,{ fileName : "TestLayout.hx", lineNumber : 139, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov1,293)).be(1,{ fileName : "TestLayout.hx", lineNumber : 140, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov1,297)).be(2,{ fileName : "TestLayout.hx", lineNumber : 141, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov1,51)).be(-1,{ fileName : "TestLayout.hx", lineNumber : 143, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov1,128)).be(-1,{ fileName : "TestLayout.hx", lineNumber : 144, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov1,512)).be(-1,{ fileName : "TestLayout.hx", lineNumber : 145, className : "TestLayout", methodName : "new"});
			});
			_gthis.it("should find a glyph in a format 1 coverage table",tmp11,null,{ fileName : "TestLayout.hx", lineNumber : 138, className : "TestLayout", methodName : "new"});
			var tmp12 = buddy_TestFunc.Sync(function() {
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,6)).be(0,{ fileName : "TestLayout.hx", lineNumber : 149, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,11)).be(1,{ fileName : "TestLayout.hx", lineNumber : 150, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,37)).be(4,{ fileName : "TestLayout.hx", lineNumber : 151, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,38)).be(5,{ fileName : "TestLayout.hx", lineNumber : 152, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,56)).be(18,{ fileName : "TestLayout.hx", lineNumber : 153, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,62)).be(24,{ fileName : "TestLayout.hx", lineNumber : 154, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,5)).be(-1,{ fileName : "TestLayout.hx", lineNumber : 156, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,8)).be(-1,{ fileName : "TestLayout.hx", lineNumber : 157, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,55)).be(-1,{ fileName : "TestLayout.hx", lineNumber : 158, className : "TestLayout", methodName : "new"});
				buddy_ShouldFloat.should(layout.getCoverageIndex(cov2,70)).be(-1,{ fileName : "TestLayout.hx", lineNumber : 159, className : "TestLayout", methodName : "new"});
			});
			_gthis.it("should find a glyph in a format 2 coverage table",tmp12,null,{ fileName : "TestLayout.hx", lineNumber : 148, className : "TestLayout", methodName : "new"});
		});
		_gthis.describe("getCoverageIndex",tmp10);
	}));
};
TestLayout.__name__ = "TestLayout";
TestLayout.__super__ = buddy_BuddySuite;
TestLayout.prototype = $extend(buddy_BuddySuite.prototype,{
	__class__: TestLayout
});
var opentype_tables_ILayoutTable = function() { };
opentype_tables_ILayoutTable.__name__ = "opentype.tables.ILayoutTable";
opentype_tables_ILayoutTable.__isInterface__ = true;
opentype_tables_ILayoutTable.prototype = {
	__class__: opentype_tables_ILayoutTable
};
var TestLayoutTable = function(version,scripts,lookups,features) {
	this.version = version;
	this.scripts = scripts;
	this.lookups = lookups;
	this.features = features;
};
TestLayoutTable.__name__ = "TestLayoutTable";
TestLayoutTable.__interfaces__ = [opentype_tables_ILayoutTable];
TestLayoutTable.prototype = {
	__class__: TestLayoutTable
};
var TestOpenType = function() {
	var _gthis = this;
	buddy_BuddySuite.call(this);
	this.describe("Test that OpenType",buddy_TestFunc.Sync(function() {
		var tmp = buddy_TestFunc.Sync(function() {
			var fontBytes;
			var error;
			var tmp1 = buddy_TestFunc.Async(function(done) {
				opentype_OpenType.loadFromFile("fonts/lato.ttf",function(b) {
					fontBytes = b;
					done();
					return;
				},function(e) {
					error = e;
					done();
					return;
				});
			});
			_gthis.beforeAll(tmp1);
			var tmp2 = buddy_TestFunc.Sync(function() {
				buddy_ShouldDynamic.should(fontBytes).beType(haxe_io_Bytes,{ fileName : "TestOpenType.hx", lineNumber : 24, className : "TestOpenType", methodName : "new"});
				buddy_ShouldDynamic.should(error).be(null,{ fileName : "TestOpenType.hx", lineNumber : 25, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("can load a ttf font as Bytes.",tmp2,null,{ fileName : "TestOpenType.hx", lineNumber : 23, className : "TestOpenType", methodName : "new"});
		});
		_gthis.describe("loadFont",tmp);
		var tmp3 = buddy_TestFunc.Sync(function() {
			var fontBytes1;
			var tmp4 = buddy_TestFunc.Async(function(done1) {
				opentype_OpenType.loadFromFile("fonts/arial.ttf",function(b1) {
					fontBytes1 = b1;
					done1();
					return;
				},function(e1) {
					return;
				});
			});
			_gthis.beforeAll(tmp4);
			var font;
			var tmp5 = buddy_TestFunc.Sync(function() {
				font = opentype_OpenType.parse(fontBytes1);
				buddy_ShouldDynamic.should(font).beType(opentype_Font,{ fileName : "TestOpenType.hx", lineNumber : 39, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("can parse Bytes of ttf to Font type.",tmp5,null,{ fileName : "TestOpenType.hx", lineNumber : 37, className : "TestOpenType", methodName : "new"});
			var tmp6 = buddy_TestFunc.Sync(function() {
				buddy_ShouldEnum.should(font.outlinesFormat).equal(opentype_Flavor.Ttf,{ fileName : "TestOpenType.hx", lineNumber : 42, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("can detect and set outlinesFormat.",tmp6,null,{ fileName : "TestOpenType.hx", lineNumber : 41, className : "TestOpenType", methodName : "new"});
		});
		_gthis.describe("parse",tmp3);
		var tmp7 = buddy_TestFunc.Sync(function() {
			var fontBytes2;
			var tmp8 = buddy_TestFunc.Async(function(done2) {
				opentype_OpenType.loadFromFile("fonts/lato.woff",function(b2) {
					fontBytes2 = b2;
					done2();
					return;
				},function(e2) {
					return;
				});
			});
			_gthis.beforeAll(tmp8);
			var font1;
			var tmp9 = buddy_TestFunc.Sync(function() {
				font1 = opentype_OpenType.parse(fontBytes2);
				buddy_ShouldDynamic.should(font1).beType(opentype_Font,{ fileName : "TestOpenType.hx", lineNumber : 56, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("can parse Bytes of woff to Font type.",tmp9,null,{ fileName : "TestOpenType.hx", lineNumber : 54, className : "TestOpenType", methodName : "new"});
			var tmp10 = buddy_TestFunc.Sync(function() {
				buddy_ShouldEnum.should(font1.outlinesFormat).equal(opentype_Flavor.Ttf,{ fileName : "TestOpenType.hx", lineNumber : 59, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("can detect and set outlinesFormat.",tmp10,null,{ fileName : "TestOpenType.hx", lineNumber : 58, className : "TestOpenType", methodName : "new"});
		});
		_gthis.describe("parse",tmp7);
		var tmp11 = buddy_TestFunc.Sync(function() {
			var fontBytes3;
			var font2;
			var tmp12 = buddy_TestFunc.Async(function(done3) {
				opentype_OpenType.loadFromFile("fonts/lato.ttf",function(b3) {
					fontBytes3 = b3;
					font2 = opentype_OpenType.parse(fontBytes3);
					done3();
					return;
				},function(e3) {
					return;
				});
			});
			_gthis.beforeAll(tmp12);
			var tmp13 = buddy_TestFunc.Sync(function() {
				buddy_ShouldDynamic.should(font2.hasChar(0)).be(true,{ fileName : "TestOpenType.hx", lineNumber : 73, className : "TestOpenType", methodName : "new"});
				buddy_ShouldDynamic.should(font2.hasChar(13)).be(true,{ fileName : "TestOpenType.hx", lineNumber : 74, className : "TestOpenType", methodName : "new"});
				buddy_ShouldDynamic.should(font2.hasChar(12)).be(false,{ fileName : "TestOpenType.hx", lineNumber : 75, className : "TestOpenType", methodName : "new"});
				buddy_ShouldDynamic.should(font2.hasChar(32)).be(true,{ fileName : "TestOpenType.hx", lineNumber : 76, className : "TestOpenType", methodName : "new"});
				buddy_ShouldDynamic.should(font2.hasChar(65)).be(true,{ fileName : "TestOpenType.hx", lineNumber : 77, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("hasChar can check if font has a glyph for a given character.",tmp13,null,{ fileName : "TestOpenType.hx", lineNumber : 72, className : "TestOpenType", methodName : "new"});
			var tmp14 = buddy_TestFunc.Sync(function() {
				buddy_ShouldFloat.should(font2.charToGlyphIndex(0)).be(1,{ fileName : "TestOpenType.hx", lineNumber : 81, className : "TestOpenType", methodName : "new"});
				buddy_ShouldFloat.should(font2.charToGlyphIndex(13)).be(2,{ fileName : "TestOpenType.hx", lineNumber : 82, className : "TestOpenType", methodName : "new"});
				buddy_ShouldFloat.should(font2.charToGlyphIndex(32)).be(3,{ fileName : "TestOpenType.hx", lineNumber : 83, className : "TestOpenType", methodName : "new"});
				buddy_ShouldFloat.should(font2.charToGlyphIndex(65)).be(36,{ fileName : "TestOpenType.hx", lineNumber : 84, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("charToGlyphIndex can find a index for a given charater.",tmp14,null,{ fileName : "TestOpenType.hx", lineNumber : 80, className : "TestOpenType", methodName : "new"});
			var tmp15 = buddy_TestFunc.Sync(function() {
				buddy_ShouldFloat.should(font2.charToGlyph(65).unicode).be(65,{ fileName : "TestOpenType.hx", lineNumber : 88, className : "TestOpenType", methodName : "new"});
				buddy_ShouldFloat.should(font2.charToGlyph(32).unicode).be(32,{ fileName : "TestOpenType.hx", lineNumber : 89, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("charToGlyph can find a glyph for a given charater.",tmp15,null,{ fileName : "TestOpenType.hx", lineNumber : 87, className : "TestOpenType", methodName : "new"});
			var tmp16 = buddy_TestFunc.Sync(function() {
				var ia = font2.charToGlyphIndex(65);
				var iw = font2.charToGlyphIndex(87);
				buddy_ShouldFloat.should(font2.getKerningValueForIndexes(ia,iw)).be(-84,{ fileName : "TestOpenType.hx", lineNumber : 96, className : "TestOpenType", methodName : "new"});
			});
			_gthis.it("charToGlyphIndex can find a index for a given charater.",tmp16,null,{ fileName : "TestOpenType.hx", lineNumber : 93, className : "TestOpenType", methodName : "new"});
		});
		_gthis.describe("font",tmp11);
	}));
};
TestOpenType.__name__ = "TestOpenType";
TestOpenType.__super__ = buddy_BuddySuite;
TestOpenType.prototype = $extend(buddy_BuddySuite.prototype,{
	__class__: TestOpenType
});
var TestParser = function() {
	var _gthis = this;
	buddy_BuddySuite.call(this);
	this.describe("Test that Parser",buddy_TestFunc.Sync(function() {
		var tmp = buddy_TestFunc.Sync(function() {
			var tmp1 = buddy_TestFunc.Sync(function() {
				var p = new opentype_Parser(TestUtil.unhex("1234"),0);
				buddy_ShouldFloat.should(p.parseByte()).be(18,{ fileName : "TestParser.hx", lineNumber : 15, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p.relativeOffset).be(1,{ fileName : "TestParser.hx", lineNumber : 16, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p.parseByte()).be(52,{ fileName : "TestParser.hx", lineNumber : 17, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 18, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a byte",tmp1,null,{ fileName : "TestParser.hx", lineNumber : 13, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseByte",tmp);
		var tmp2 = buddy_TestFunc.Sync(function() {
			var tmp3 = buddy_TestFunc.Sync(function() {
				var p1 = new opentype_Parser(TestUtil.unhex("0080"),0);
				p1.parseChar();
				buddy_ShouldFloat.should(p1.relativeOffset).be(1,{ fileName : "TestParser.hx", lineNumber : 26, className : "TestParser", methodName : "new"});
				p1.parseChar();
				buddy_ShouldFloat.should(p1.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 28, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a character",tmp3,null,{ fileName : "TestParser.hx", lineNumber : 23, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseChar",tmp2);
		var tmp4 = buddy_TestFunc.Sync(function() {
			var tmp5 = buddy_TestFunc.Sync(function() {
				var p2 = new opentype_Parser(TestUtil.unhex("0080"),0);
				buddy_ShouldFloat.should(p2.parseUShort()).be(128,{ fileName : "TestParser.hx", lineNumber : 35, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p2.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 36, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a 16 bit integer",tmp5,null,{ fileName : "TestParser.hx", lineNumber : 33, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseUShort",tmp4);
		var tmp6 = buddy_TestFunc.Sync(function() {
			var tmp7 = buddy_TestFunc.Sync(function() {
				var p3 = new opentype_Parser(TestUtil.unhex("0004 1234 FACE 5F5F"),0);
				buddy_ShouldFloat.should(p3.parsePointer().parseUShort()).be(64206,{ fileName : "TestParser.hx", lineNumber : 43, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p3.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 44, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse 16 bit offset from the stream",tmp7,null,{ fileName : "TestParser.hx", lineNumber : 41, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parsePointer",tmp6);
		var tmp8 = buddy_TestFunc.Sync(function() {
			var tmp9 = buddy_TestFunc.Sync(function() {
				var p4 = new opentype_Parser(TestUtil.unhex("0000"),0);
				buddy_ShouldIterable.should(p4.parseUShortList()).containExactly([],{ fileName : "TestParser.hx", lineNumber : 51, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p4.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 52, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse an empty list",tmp9,null,{ fileName : "TestParser.hx", lineNumber : 49, className : "TestParser", methodName : "new"});
			var tmp10 = buddy_TestFunc.Sync(function() {
				var p5 = new opentype_Parser(TestUtil.unhex("0003 1234 DEAD BEEF"),0);
				buddy_ShouldIterable.should(p5.parseUShortList()).containExactly([4660,57005,48879],{ fileName : "TestParser.hx", lineNumber : 56, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p5.relativeOffset).be(8,{ fileName : "TestParser.hx", lineNumber : 57, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a list",tmp10,null,{ fileName : "TestParser.hx", lineNumber : 54, className : "TestParser", methodName : "new"});
			var tmp11 = buddy_TestFunc.Sync(function() {
				var p6 = new opentype_Parser(TestUtil.unhex("1234 DEAD BEEF 5678 9ABC"),0);
				buddy_ShouldIterable.should(p6.parseUShortListOfLength(3)).containExactly([4660,57005,48879],{ fileName : "TestParser.hx", lineNumber : 61, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p6.relativeOffset).be(6,{ fileName : "TestParser.hx", lineNumber : 62, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a list of predefined length",tmp11,null,{ fileName : "TestParser.hx", lineNumber : 59, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseUShortList",tmp8);
		var tmp12 = buddy_TestFunc.Sync(function() {
			var tmp13 = buddy_TestFunc.Sync(function() {
				var data = "0003 12 34 56 78 9A BC";
				var p7 = new opentype_Parser(TestUtil.unhex(data),0);
				buddy_ShouldIterable.should(p7.parseList($bind(p7,p7.parseUShort))).containExactly([4660,22136,39612],{ fileName : "TestParser.hx", lineNumber : 70, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p7.relativeOffset).be(8,{ fileName : "TestParser.hx", lineNumber : 71, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a list of values",tmp13,null,{ fileName : "TestParser.hx", lineNumber : 67, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseList",tmp12);
		var tmp14 = buddy_TestFunc.Sync(function() {
			var tmp15 = buddy_TestFunc.Sync(function() {
				var data1 = "12 34 56 78 9A BC";
				var p8 = new opentype_Parser(TestUtil.unhex(data1),0);
				buddy_ShouldIterable.should(p8.parseListOfLength(3,$bind(p8,p8.parseUShort))).containExactly([4660,22136,39612],{ fileName : "TestParser.hx", lineNumber : 78, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p8.relativeOffset).be(6,{ fileName : "TestParser.hx", lineNumber : 79, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a list of values of predefined length",tmp15,null,{ fileName : "TestParser.hx", lineNumber : 75, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseListOfLength",tmp14);
		var tmp16 = buddy_TestFunc.Sync(function() {
			var tmp17 = buddy_TestFunc.Sync(function() {
				var data2 = "0002 12 34 56 78 9A BC";
				var p9 = new opentype_Parser(TestUtil.unhex(data2),0);
				var result = p9.parseRecordList([new opentype_RecordDescription("a",opentype_Parser.byte),new opentype_RecordDescription("b",opentype_Parser.uShort)]);
				buddy_ShouldString.should(result[0][0].name).be("a",{ fileName : "TestParser.hx", lineNumber : 87, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result[0][0].value).be(18,{ fileName : "TestParser.hx", lineNumber : 88, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(result[0][1].name).be("b",{ fileName : "TestParser.hx", lineNumber : 89, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result[0][1].value).be(13398,{ fileName : "TestParser.hx", lineNumber : 90, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(result[1][0].name).be("a",{ fileName : "TestParser.hx", lineNumber : 91, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result[1][0].value).be(120,{ fileName : "TestParser.hx", lineNumber : 92, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(result[1][1].name).be("b",{ fileName : "TestParser.hx", lineNumber : 93, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result[1][1].value).be(39612,{ fileName : "TestParser.hx", lineNumber : 94, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p9.relativeOffset).be(8,{ fileName : "TestParser.hx", lineNumber : 95, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a list of records",tmp17,null,{ fileName : "TestParser.hx", lineNumber : 83, className : "TestParser", methodName : "new"});
			var tmp18 = buddy_TestFunc.Sync(function() {
				var data3 = "0000";
				var p10 = new opentype_Parser(TestUtil.unhex(data3),0);
				buddy_ShouldIterable.should(p10.parseRecordList([new opentype_RecordDescription("a",opentype_Parser.byte),new opentype_RecordDescription("b",opentype_Parser.uShort)])).containExactly([],{ fileName : "TestParser.hx", lineNumber : 100, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p10.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 101, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse an empty list of records",tmp18,null,{ fileName : "TestParser.hx", lineNumber : 97, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseRecordList",tmp16);
		var tmp19 = buddy_TestFunc.Sync(function() {
			var tmp20 = buddy_TestFunc.Sync(function() {
				var data4 = "12 34 56 78 9A BC";
				var p11 = new opentype_Parser(TestUtil.unhex(data4),0);
				var result1 = p11.parseRecordListOfLength(2,[new opentype_RecordDescription("a",opentype_Parser.byte),new opentype_RecordDescription("b",opentype_Parser.uShort)]);
				buddy_ShouldString.should(result1[0][0].name).be("a",{ fileName : "TestParser.hx", lineNumber : 109, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result1[0][0].value).be(18,{ fileName : "TestParser.hx", lineNumber : 110, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(result1[0][1].name).be("b",{ fileName : "TestParser.hx", lineNumber : 111, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result1[0][1].value).be(13398,{ fileName : "TestParser.hx", lineNumber : 112, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(result1[1][0].name).be("a",{ fileName : "TestParser.hx", lineNumber : 113, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result1[1][0].value).be(120,{ fileName : "TestParser.hx", lineNumber : 114, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(result1[1][1].name).be("b",{ fileName : "TestParser.hx", lineNumber : 115, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result1[1][1].value).be(39612,{ fileName : "TestParser.hx", lineNumber : 116, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p11.relativeOffset).be(6,{ fileName : "TestParser.hx", lineNumber : 117, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a list of records of predefined length",tmp20,null,{ fileName : "TestParser.hx", lineNumber : 105, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseRecordListOfLength",tmp19);
		var tmp21 = buddy_TestFunc.Sync(function() {
			var tmp22 = buddy_TestFunc.Sync(function() {
				var data5 = "0003 0008 000E 0016" + "0002 1234 5678" + "0003 DEAD BEEF FADE" + "0001 9876";
				var p12 = new opentype_Parser(TestUtil.unhex(data5),0);
				var result2 = p12.parseListOfListsOfUShort();
				buddy_ShouldIterable.should(result2[0]).containExactly([4660,22136],{ fileName : "TestParser.hx", lineNumber : 129, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(result2[1]).containExactly([57005,48879,64222],{ fileName : "TestParser.hx", lineNumber : 130, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(result2[2]).containExactly([39030],{ fileName : "TestParser.hx", lineNumber : 131, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a list of lists of 16-bit integers",tmp22,null,{ fileName : "TestParser.hx", lineNumber : 122, className : "TestParser", methodName : "new"});
			var tmp23 = buddy_TestFunc.Sync(function() {
				var p13 = new opentype_Parser(TestUtil.unhex("0000"),0);
				buddy_ShouldIterable.should(p13.parseListOfListsOfUShort()).containExactly([],{ fileName : "TestParser.hx", lineNumber : 135, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse an empty list of lists",tmp23,null,{ fileName : "TestParser.hx", lineNumber : 133, className : "TestParser", methodName : "new"});
			var tmp24 = buddy_TestFunc.Sync(function() {
				var p14 = new opentype_Parser(TestUtil.unhex("0001 0004 0000"),0);
				var result3 = p14.parseListOfListsOfUShort();
				buddy_ShouldFloat.should(result3.length).be(1,{ fileName : "TestParser.hx", lineNumber : 140, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(result3[0]).containExactly([],{ fileName : "TestParser.hx", lineNumber : 141, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse list of empty lists",tmp24,null,{ fileName : "TestParser.hx", lineNumber : 137, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseListOfListsOf16",tmp21);
		var tmp25 = buddy_TestFunc.Sync(function() {
			var tmp26 = buddy_TestFunc.Sync(function() {
				var data6 = "0002 0006 0012" + "0002 0006 0009 12 34 56 78 9A BC" + "0001 0004 DE F0 12 ";
				var p15 = new opentype_Parser(TestUtil.unhex(data6),0);
				var parseRecord = function() {
					return { a : p15.parseByte(), b : p15.parseUShort()};
				};
				var result4 = p15.parseListOfLists(parseRecord);
				buddy_ShouldFloat.should(result4[0][0].a).be(18,{ fileName : "TestParser.hx", lineNumber : 157, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result4[0][0].b).be(13398,{ fileName : "TestParser.hx", lineNumber : 158, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result4[0][1].a).be(120,{ fileName : "TestParser.hx", lineNumber : 159, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result4[0][1].b).be(39612,{ fileName : "TestParser.hx", lineNumber : 160, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result4[1][0].a).be(222,{ fileName : "TestParser.hx", lineNumber : 161, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(result4[1][0].b).be(61458,{ fileName : "TestParser.hx", lineNumber : 162, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can parse a list of lists of records",tmp26,null,{ fileName : "TestParser.hx", lineNumber : 145, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseListOfLists",tmp25);
		var tmp27 = buddy_TestFunc.Sync(function() {
			var tmp28 = buddy_TestFunc.Sync(function() {
				var data7 = "0004 1234" + "0001 0005 0038 003B 0041 0042 004A";
				var p16 = new opentype_Parser(TestUtil.unhex(data7),4);
				var coverage = opentype_Parser.coverage(p16);
				buddy_ShouldFloat.should(coverage.format).be(1,{ fileName : "TestParser.hx", lineNumber : 173, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(coverage.glyphs).containExactly([56,59,65,66,74],{ fileName : "TestParser.hx", lineNumber : 174, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(coverage.ranges).containExactly([],{ fileName : "TestParser.hx", lineNumber : 175, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p16.relativeOffset).be(14,{ fileName : "TestParser.hx", lineNumber : 176, className : "TestParser", methodName : "new"});
			});
			_gthis.it("should parse a CoverageFormat1 table",tmp28,null,{ fileName : "TestParser.hx", lineNumber : 167, className : "TestParser", methodName : "new"});
			var tmp29 = buddy_TestFunc.Sync(function() {
				var data8 = "0004 1234" + "0002 0001 004E 0057 0000";
				var p17 = new opentype_Parser(TestUtil.unhex(data8),4);
				var coverage1 = opentype_Parser.coverage(p17);
				buddy_ShouldFloat.should(coverage1.format).be(2,{ fileName : "TestParser.hx", lineNumber : 184, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(coverage1.glyphs).containExactly([],{ fileName : "TestParser.hx", lineNumber : 185, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(coverage1.ranges[0].start).be(78,{ fileName : "TestParser.hx", lineNumber : 186, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(coverage1.ranges[0].end).be(87,{ fileName : "TestParser.hx", lineNumber : 187, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(coverage1.ranges[0].value).be(0,{ fileName : "TestParser.hx", lineNumber : 188, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p17.relativeOffset).be(10,{ fileName : "TestParser.hx", lineNumber : 189, className : "TestParser", methodName : "new"});
			});
			_gthis.it("should parse a CoverageFormat2 table",tmp29,null,{ fileName : "TestParser.hx", lineNumber : 178, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseCoverage",tmp27);
		var tmp30 = buddy_TestFunc.Sync(function() {
			var tmp31 = buddy_TestFunc.Sync(function() {
				var data9 = "0001 0032 001A" + "0000 0001 0000 0001 0000 0001 0002 0001 0000 0002 0001 0001 0000" + "0000 0000 0002 0002 0000 0000 0001 0000 0000 0000 0000 0002 0001";
				var p18 = new opentype_Parser(TestUtil.unhex(data9),0);
				var res = p18.parseClassDef();
				buddy_ShouldFloat.should(res.format).be(1,{ fileName : "TestParser.hx", lineNumber : 201, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res.startGlyph).be(50,{ fileName : "TestParser.hx", lineNumber : 202, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(res.classes).containExactly([0,1,0,1,0,1,2,1,0,2,1,1,0,0,0,2,2,0,0,1,0,0,0,0,2,1],{ fileName : "TestParser.hx", lineNumber : 203, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p18.relativeOffset).be(58,{ fileName : "TestParser.hx", lineNumber : 207, className : "TestParser", methodName : "new"});
			});
			_gthis.it("should parse a ClassDefFormat1 table",tmp31,null,{ fileName : "TestParser.hx", lineNumber : 194, className : "TestParser", methodName : "new"});
			var tmp32 = buddy_TestFunc.Sync(function() {
				var data10 = "0002 0003 0030 0031 0002 0040 0041 0003 00D2 00D3 0001";
				var p19 = new opentype_Parser(TestUtil.unhex(data10),0);
				var res1 = p19.parseClassDef();
				buddy_ShouldFloat.should(res1.format).be(2,{ fileName : "TestParser.hx", lineNumber : 214, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[0].start).be(48,{ fileName : "TestParser.hx", lineNumber : 215, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[0].end).be(49,{ fileName : "TestParser.hx", lineNumber : 216, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[0].value).be(2,{ fileName : "TestParser.hx", lineNumber : 217, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[1].start).be(64,{ fileName : "TestParser.hx", lineNumber : 218, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[1].end).be(65,{ fileName : "TestParser.hx", lineNumber : 219, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[1].value).be(3,{ fileName : "TestParser.hx", lineNumber : 220, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[2].start).be(210,{ fileName : "TestParser.hx", lineNumber : 221, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[2].end).be(211,{ fileName : "TestParser.hx", lineNumber : 222, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res1.ranges[2].value).be(1,{ fileName : "TestParser.hx", lineNumber : 223, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p19.relativeOffset).be(22,{ fileName : "TestParser.hx", lineNumber : 224, className : "TestParser", methodName : "new"});
			});
			_gthis.it("should parse a ClassDefFormat2 table",tmp32,null,{ fileName : "TestParser.hx", lineNumber : 209, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseClassDef",tmp30);
		var tmp33 = buddy_TestFunc.Sync(function() {
			var tmp34 = buddy_TestFunc.Sync(function() {
				var data11 = "0004 1234" + "0003 68616E69 0014 6B616E61 0018 6C61746E 001C" + "0000 0000 0000 0000" + "000A 0001 55524420 0016" + "0000 FFFF 0003 0000 0001 0002" + "0000 0003 0003 0000 0001 0002";
				var p20 = new opentype_Parser(TestUtil.unhex(data11),0);
				var sl = p20.parseScriptList();
				buddy_ShouldString.should(sl[0].tag).be("hani",{ fileName : "TestParser.hx", lineNumber : 240, className : "TestParser", methodName : "new"});
				buddy_ShouldDynamic.should(sl[0].script.defaultLangSys).be(null,{ fileName : "TestParser.hx", lineNumber : 241, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(sl[0].script.langSysRecords).containExactly([],{ fileName : "TestParser.hx", lineNumber : 242, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(sl[1].tag).be("kana",{ fileName : "TestParser.hx", lineNumber : 243, className : "TestParser", methodName : "new"});
				buddy_ShouldDynamic.should(sl[1].script.defaultLangSys).be(null,{ fileName : "TestParser.hx", lineNumber : 244, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(sl[1].script.langSysRecords).containExactly([],{ fileName : "TestParser.hx", lineNumber : 245, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(sl[2].tag).be("latn",{ fileName : "TestParser.hx", lineNumber : 246, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(sl[2].script.defaultLangSys.reserved).be(0,{ fileName : "TestParser.hx", lineNumber : 247, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(sl[2].script.defaultLangSys.reqFeatureIndex).be(65535,{ fileName : "TestParser.hx", lineNumber : 248, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(sl[2].script.defaultLangSys.featureIndexes).containExactly([0,1,2],{ fileName : "TestParser.hx", lineNumber : 249, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(sl[2].script.langSysRecords[0].tag).be("URD ",{ fileName : "TestParser.hx", lineNumber : 250, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(sl[2].script.langSysRecords[0].langSys.reserved).be(0,{ fileName : "TestParser.hx", lineNumber : 251, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(sl[2].script.langSysRecords[0].langSys.reqFeatureIndex).be(3,{ fileName : "TestParser.hx", lineNumber : 252, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(sl[2].script.langSysRecords[0].langSys.featureIndexes).containExactly([0,1,2],{ fileName : "TestParser.hx", lineNumber : 253, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p20.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 254, className : "TestParser", methodName : "new"});
			});
			_gthis.it("should parse a ScriptList table",tmp34,null,{ fileName : "TestParser.hx", lineNumber : 230, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseScriptList",tmp33);
		var tmp35 = buddy_TestFunc.Sync(function() {
			var tmp36 = buddy_TestFunc.Sync(function() {
				var data12 = "0004 0000" + "0003 6C696761 0014 6C696761 001A 6C696761 0022" + "0000 0001 0000   0000 0002 0000 0001   0000 0003 0000 0001 0002";
				var p21 = new opentype_Parser(TestUtil.unhex(data12),0);
				var fl = p21.parseFeatureList();
				buddy_ShouldString.should(fl[0].tag).be("liga",{ fileName : "TestParser.hx", lineNumber : 267, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(fl[0].feature.featureParams).be(0,{ fileName : "TestParser.hx", lineNumber : 268, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(fl[0].feature.lookupListIndexes).containExactly([0],{ fileName : "TestParser.hx", lineNumber : 269, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(fl[1].tag).be("liga",{ fileName : "TestParser.hx", lineNumber : 270, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(fl[1].feature.featureParams).be(0,{ fileName : "TestParser.hx", lineNumber : 271, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(fl[1].feature.lookupListIndexes).containExactly([0,1],{ fileName : "TestParser.hx", lineNumber : 272, className : "TestParser", methodName : "new"});
				buddy_ShouldString.should(fl[2].tag).be("liga",{ fileName : "TestParser.hx", lineNumber : 273, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(fl[2].feature.featureParams).be(0,{ fileName : "TestParser.hx", lineNumber : 274, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(fl[2].feature.lookupListIndexes).containExactly([0,1,2],{ fileName : "TestParser.hx", lineNumber : 275, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p21.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 276, className : "TestParser", methodName : "new"});
			});
			_gthis.it("should parse a FeatureList table",tmp36,null,{ fileName : "TestParser.hx", lineNumber : 259, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseFeatureList",tmp35);
		var tmp37 = buddy_TestFunc.Sync(function() {
			var tmp38 = buddy_TestFunc.Sync(function() {
				var data13 = "0004 0000" + "0003 0008 0010 0018" + "0004 000C 0001 0018" + "0004 000C 0001 0028" + "0004 000C 0001 0038" + "1234 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000" + "5678 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000" + "9ABC";
				var lookupTableParsers = [null,null,null,null,opentype_Parser.uShort];
				var p22 = new opentype_Parser(TestUtil.unhex(data13),0);
				var res2 = p22.parseLookupList(lookupTableParsers);
				buddy_ShouldFloat.should(res2[0].lookupType).be(4,{ fileName : "TestParser.hx", lineNumber : 294, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res2[0].lookupFlag).be(12,{ fileName : "TestParser.hx", lineNumber : 295, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(res2[0].subTables).containExactly([4660],{ fileName : "TestParser.hx", lineNumber : 296, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res2[1].lookupType).be(4,{ fileName : "TestParser.hx", lineNumber : 297, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res2[1].lookupFlag).be(12,{ fileName : "TestParser.hx", lineNumber : 298, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(res2[1].subTables).containExactly([22136],{ fileName : "TestParser.hx", lineNumber : 299, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res2[2].lookupType).be(4,{ fileName : "TestParser.hx", lineNumber : 300, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(res2[2].lookupFlag).be(12,{ fileName : "TestParser.hx", lineNumber : 301, className : "TestParser", methodName : "new"});
				buddy_ShouldIterable.should(res2[2].subTables).containExactly([39612],{ fileName : "TestParser.hx", lineNumber : 302, className : "TestParser", methodName : "new"});
				buddy_ShouldFloat.should(p22.relativeOffset).be(2,{ fileName : "TestParser.hx", lineNumber : 303, className : "TestParser", methodName : "new"});
			});
			_gthis.it("should parse a LookupList table",tmp38,null,{ fileName : "TestParser.hx", lineNumber : 281, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("parseLookupList",tmp37);
		var tmp39 = buddy_TestFunc.Sync(function() {
			var tmp40 = buddy_TestFunc.Sync(function() {
				var data14 = TestUtil.unhex("0002 0000");
				buddy_ShouldString.should(opentype_Parser.getTag(data14,0)).be(opentype_BytesHelper.fromCharCodes([0,2,0,0]),{ fileName : "TestParser.hx", lineNumber : 310, className : "TestParser", methodName : "new"});
			});
			_gthis.it("can read tag from font Bytes",tmp40,null,{ fileName : "TestParser.hx", lineNumber : 308, className : "TestParser", methodName : "new"});
		});
		_gthis.describe("getTag",tmp39);
	}));
};
TestParser.__name__ = "TestParser";
TestParser.__super__ = buddy_BuddySuite;
TestParser.prototype = $extend(buddy_BuddySuite.prototype,{
	__class__: TestParser
});
var TestUtil = function() { };
TestUtil.__name__ = "TestUtil";
TestUtil.hex = function(bytes) {
	var values = [];
	var _g = 0;
	var _g1 = bytes.length;
	while(_g < _g1) {
		var i = _g++;
		var b = bytes.get(i);
		if(b < 16) {
			values.push("0" + StringTools.hex(b));
		} else {
			values.push(StringTools.hex(b));
		}
	}
	return values.join(" ").toUpperCase();
};
TestUtil.unhex = function(str) {
	str = str.split(" ").join("");
	return haxe_io_Bytes.ofHex(str);
};
var Type = function() { };
Type.__name__ = "Type";
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var buddy_SpecStatus = $hxEnums["buddy.SpecStatus"] = { __ename__ : true, __constructs__ : ["Unknown","Passed","Pending","Failed"]
	,Unknown: {_hx_index:0,__enum__:"buddy.SpecStatus",toString:$estr}
	,Passed: {_hx_index:1,__enum__:"buddy.SpecStatus",toString:$estr}
	,Pending: {_hx_index:2,__enum__:"buddy.SpecStatus",toString:$estr}
	,Failed: {_hx_index:3,__enum__:"buddy.SpecStatus",toString:$estr}
};
var buddy_Step = $hxEnums["buddy.Step"] = { __ename__ : true, __constructs__ : ["TSuite","TSpec"]
	,TSuite: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"buddy.Step",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TSpec: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"buddy.Step",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var buddy_Suite = function(description) {
	this.stack = [];
	this.steps = [];
	if(description == null) {
		throw new js__$Boot_HaxeError("Suite requires a description.");
	}
	this.description = description;
};
buddy_Suite.__name__ = "buddy.Suite";
buddy_Suite.prototype = {
	get_specs: function() {
		var output = [];
		var _g = 0;
		var _g1 = this.steps;
		while(_g < _g1.length) {
			var step = _g1[_g];
			++_g;
			if(step._hx_index == 1) {
				var s = step.s;
				output.push(s);
			}
		}
		return output;
	}
	,get_suites: function() {
		var output = [];
		var _g = 0;
		var _g1 = this.steps;
		while(_g < _g1.length) {
			var step = _g1[_g];
			++_g;
			if(step._hx_index == 0) {
				var s = step.s;
				output.push(s);
			}
		}
		return output;
	}
	,get_time: function() {
		var total = 0.0;
		var _g = 0;
		var _g1 = this.steps;
		while(_g < _g1.length) {
			var step = _g1[_g];
			++_g;
			switch(step._hx_index) {
			case 0:
				var s = step.s;
				total += s.get_time();
				break;
			case 1:
				var s1 = step.s;
				total += s1.time;
				break;
			}
		}
		return total;
	}
	,passed: function() {
		if(Lambda.exists(this.get_specs(),function(spec) {
			return spec.status == buddy_SpecStatus.Failed;
		})) {
			return false;
		}
		return !Lambda.exists(this.get_suites(),function(suite) {
			return !suite.passed();
		});
	}
	,__class__: buddy_Suite
	,__properties__: {get_time:"get_time",get_suites:"get_suites",get_specs:"get_specs"}
};
var buddy_Spec = function(description,fileName) {
	this.time = 0;
	this.fileName = "";
	this.traces = [];
	this.failures = [];
	this.status = buddy_SpecStatus.Unknown;
	if(description == null) {
		throw new js__$Boot_HaxeError("Spec must have a description.");
	}
	this.description = description;
	this.fileName = fileName;
};
buddy_Spec.__name__ = "buddy.Spec";
buddy_Spec.prototype = {
	__class__: buddy_Spec
};
var buddy_Failure = function(error,stack) {
	if(error == null) {
		throw new js__$Boot_HaxeError("Failure must have an error.");
	}
	this.error = error;
	this.stack = stack == null ? [] : stack;
};
buddy_Failure.__name__ = "buddy.Failure";
buddy_Failure.prototype = {
	__class__: buddy_Failure
};
var buddy_TestFunc = $hxEnums["buddy.TestFunc"] = { __ename__ : true, __constructs__ : ["Async","Sync"]
	,Async: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"buddy.TestFunc",toString:$estr}; },$_.__params__ = ["f"],$_)
	,Sync: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"buddy.TestFunc",toString:$estr}; },$_.__params__ = ["f"],$_)
};
var buddy_TestSpec = $hxEnums["buddy.TestSpec"] = { __ename__ : true, __constructs__ : ["Describe","It"]
	,Describe: ($_=function(suite,included) { return {_hx_index:0,suite:suite,included:included,__enum__:"buddy.TestSpec",toString:$estr}; },$_.__params__ = ["suite","included"],$_)
	,It: ($_=function(description,test,included,pos,time) { return {_hx_index:1,description:description,test:test,included:included,pos:pos,time:time,__enum__:"buddy.TestSpec",toString:$estr}; },$_.__params__ = ["description","test","included","pos","time"],$_)
};
var buddy_TestSuite = function(description) {
	this.afterAll = new haxe_ds_List();
	this.afterEach = new haxe_ds_List();
	this.specs = new haxe_ds_List();
	this.beforeEach = new haxe_ds_List();
	this.beforeAll = new haxe_ds_List();
	if(description == null) {
		throw new js__$Boot_HaxeError("TestSuite must have a description. Can be empty.");
	}
	this.description = description;
};
buddy_TestSuite.__name__ = "buddy.TestSuite";
buddy_TestSuite.prototype = {
	__class__: buddy_TestSuite
};
var buddy_Should = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	this.value = value;
	this.inverse = inverse;
};
buddy_Should.__name__ = "buddy.Should";
buddy_Should.prototype = {
	be: function(expected,p) {
		var result = this.value == expected;
		this.test(result,p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(expected) + " but was equal to that");
	}
	,beType: function(type,p) {
		this.test(js_Boot.__instanceof(this.value,type),p,"Expected " + this.quote(this.value) + " to be type " + this.quote(type),"Expected " + this.quote(this.value) + " not to be type " + this.quote(type));
	}
	,quote: function(v) {
		if(typeof(v) == "string") {
			return "\"" + Std.string(v) + "\"";
		}
		if(((v) instanceof haxe_ds_List)) {
			return Std.string(Lambda.array(v));
		}
		return Std.string(v);
	}
	,fail: function(error,errorInverted,p) {
		var tmp = this.inverse ? errorInverted : error;
		var tmp1 = buddy_SuitesRunner.posInfosToStack(p);
		buddy_SuitesRunner.currentTest(false,tmp,tmp1);
	}
	,test: function(expr,p,error,errorInverted) {
		if(buddy_SuitesRunner.currentTest == null) {
			throw new js__$Boot_HaxeError("SuitesRunner.currentTest was null");
		}
		if(!this.inverse) {
			var tmp = buddy_SuitesRunner.posInfosToStack(p);
			buddy_SuitesRunner.currentTest(expr,error,tmp);
		} else {
			var tmp1 = buddy_SuitesRunner.posInfosToStack(p);
			buddy_SuitesRunner.currentTest(!expr,errorInverted,tmp1);
		}
	}
	,__class__: buddy_Should
};
var buddy_ShouldDynamic = function(value,inverse) {
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldDynamic.__name__ = "buddy.ShouldDynamic";
buddy_ShouldDynamic.should = function(d) {
	return new buddy_ShouldDynamic(d);
};
buddy_ShouldDynamic.__super__ = buddy_Should;
buddy_ShouldDynamic.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldDynamic(this.value,!this.inverse);
	}
	,__class__: buddy_ShouldDynamic
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldEnum = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldEnum.__name__ = "buddy.ShouldEnum";
buddy_ShouldEnum.should = function(e) {
	return new buddy_ShouldEnum(e);
};
buddy_ShouldEnum.__super__ = buddy_Should;
buddy_ShouldEnum.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldEnum(this.value,!this.inverse);
	}
	,be: function(expected,p) {
		this.equal(expected,p);
	}
	,equal: function(expected,p) {
		this.test(Type.enumEq(this.value,expected),p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(this.value) + " but was equal to that");
	}
	,__class__: buddy_ShouldEnum
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldInt = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldInt.__name__ = "buddy.ShouldInt";
buddy_ShouldInt.should = function(i) {
	return new buddy_ShouldInt(i);
};
buddy_ShouldInt.__super__ = buddy_Should;
buddy_ShouldInt.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldInt(this.value,!this.inverse);
	}
	,beLessThan: function(expected,p) {
		this.test(this.value < expected,p,"Expected less than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beLessThanOrEqualTo: function(expected,p) {
		this.test(this.value <= expected,p,"Expected less than or equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than or equal to " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThan: function(expected,p) {
		this.test(this.value > expected,p,"Expected greater than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThanOrEqualTo: function(expected,p) {
		this.test(this.value >= expected,p,"Expected greater than or equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than or equal to " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,__class__: buddy_ShouldInt
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldInt64 = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldInt64.__name__ = "buddy.ShouldInt64";
buddy_ShouldInt64.should = function(i) {
	return new buddy_ShouldInt64(i);
};
buddy_ShouldInt64.__super__ = buddy_Should;
buddy_ShouldInt64.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldInt64(this.value,!this.inverse);
	}
	,be: function(expected,p) {
		var b = this.value;
		var v = expected.high - b.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(expected.low,b.low);
		var result = (expected.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) == 0;
		this.test(result,p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(expected) + " but was equal to that");
	}
	,beLessThan: function(expected,p) {
		var a = this.value;
		var v = a.high - expected.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,expected.low);
		this.test((a.high < 0 ? expected.high < 0 ? v : -1 : expected.high >= 0 ? v : 1) < 0,p,"Expected less than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beLessThanOrEqualTo: function(expected,p) {
		var a = this.value;
		var v = a.high - expected.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,expected.low);
		this.test((a.high < 0 ? expected.high < 0 ? v : -1 : expected.high >= 0 ? v : 1) <= 0,p,"Expected less than or equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than or equal to " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThan: function(expected,p) {
		var a = this.value;
		var v = a.high - expected.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,expected.low);
		this.test((a.high < 0 ? expected.high < 0 ? v : -1 : expected.high >= 0 ? v : 1) > 0,p,"Expected greater than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThanOrEqualTo: function(expected,p) {
		var a = this.value;
		var v = a.high - expected.high | 0;
		v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,expected.low);
		this.test((a.high < 0 ? expected.high < 0 ? v : -1 : expected.high >= 0 ? v : 1) >= 0,p,"Expected greater than or equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than or equal to " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,__class__: buddy_ShouldInt64
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldFloat = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldFloat.__name__ = "buddy.ShouldFloat";
buddy_ShouldFloat.should = function(i) {
	return new buddy_ShouldFloat(i);
};
buddy_ShouldFloat.__super__ = buddy_Should;
buddy_ShouldFloat.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldFloat(this.value,!this.inverse);
	}
	,beLessThan: function(expected,p) {
		this.test(this.value < expected,p,"Expected less than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beLessThanOrEqualTo: function(expected,p) {
		this.test(this.value <= expected,p,"Expected less than or equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than or equal to " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThan: function(expected,p) {
		this.test(this.value > expected,p,"Expected greater than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThanOrEqualTo: function(expected,p) {
		this.test(this.value >= expected,p,"Expected greater than or equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than or equal to " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beCloseTo: function(expected,precision,p) {
		if(precision == null) {
			precision = 2;
		}
		var diff = Math.abs(expected - this.value);
		var threshold = Math.pow(10,-precision) / 2;
		var expr = diff < threshold;
		this.test(expr,p,"Expected close to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected " + this.quote(this.value) + " not to be close to " + this.quote(expected));
	}
	,__class__: buddy_ShouldFloat
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldDate = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldDate.__name__ = "buddy.ShouldDate";
buddy_ShouldDate.should = function(i) {
	return new buddy_ShouldDate(i);
};
buddy_ShouldDate.__super__ = buddy_Should;
buddy_ShouldDate.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldDate(this.value,!this.inverse);
	}
	,beOn: function(expected,p) {
		this.test(this.value.getTime() == expected.getTime(),p,"Expected date equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not equal to " + this.quote(expected));
	}
	,beBefore: function(expected,p) {
		this.test(this.value.getTime() < expected.getTime(),p,"Expected date before " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not before " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beAfter: function(expected,p) {
		this.test(this.value.getTime() > expected.getTime(),p,"Expected date after " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not after " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beOnStr: function(expected,p) {
		this.beOn(HxOverrides.strDate(expected),p);
		return;
	}
	,beBeforeStr: function(expected,p) {
		this.beBefore(HxOverrides.strDate(expected),p);
		return;
	}
	,beAfterStr: function(expected,p) {
		this.beAfter(HxOverrides.strDate(expected),p);
		return;
	}
	,__class__: buddy_ShouldDate
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldIterable = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldIterable.__name__ = "buddy.ShouldIterable";
buddy_ShouldIterable.should = function(value) {
	return new buddy_ShouldIterable(value);
};
buddy_ShouldIterable.__super__ = buddy_Should;
buddy_ShouldIterable.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldIterable(this.value,!this.inverse);
	}
	,contain: function(o,p) {
		this.test(Lambda.exists(this.value,function(el) {
			return el == o;
		}),p,"Expected " + this.quote(this.value) + " to contain " + this.quote(o),"Expected " + this.quote(this.value) + " not to contain " + this.quote(o));
	}
	,containAll: function(values,p) {
		var expr = true;
		var a = $getIterator(values);
		while(a.hasNext()) {
			var a1 = a.next();
			var a2 = [a1];
			if(!Lambda.exists(this.value,(function(a3) {
				return function(v) {
					return v == a3[0];
				};
			})(a2))) {
				expr = false;
				break;
			}
		}
		this.test(expr,p,"Expected " + this.quote(this.value) + " to contain all of " + this.quote(values),"Expected " + this.quote(this.value) + " not to contain all of " + this.quote(values));
	}
	,containExactly: function(values,p) {
		var a = $getIterator(this.value);
		var b = $getIterator(values);
		var expr = true;
		while(a.hasNext() || b.hasNext()) if(a.next() != b.next()) {
			expr = false;
			break;
		}
		this.test(expr,p,"Expected " + this.quote(this.value) + " to contain exactly " + this.quote(values),"Expected " + this.quote(this.value) + " not to contain exactly " + this.quote(values));
	}
	,__class__: buddy_ShouldIterable
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldString = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldString.__name__ = "buddy.ShouldString";
buddy_ShouldString.should = function(str) {
	return new buddy_ShouldString(str);
};
buddy_ShouldString.__super__ = buddy_Should;
buddy_ShouldString.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldString(this.value,!this.inverse);
	}
	,contain: function(substring,p) {
		if(this.value == null) {
			this.fail("Expected string to contain " + this.quote(substring) + " but string was null","Expected string not to contain " + this.quote(substring) + " but string was null",p);
			return;
		}
		this.test(this.value.indexOf(substring) >= 0,p,"Expected " + this.quote(this.value) + " to contain " + this.quote(substring),"Expected " + this.quote(this.value) + " not to contain " + this.quote(substring));
	}
	,startWith: function(substring,p) {
		if(this.value == null) {
			this.fail("Expected string to start with " + this.quote(substring) + " but string was null","Expected string not to start with " + this.quote(substring) + " but string was null",p);
			return;
		}
		this.test(StringTools.startsWith(this.value,substring),p,"Expected " + this.quote(this.value) + " to start with " + this.quote(substring),"Expected " + this.quote(this.value) + " not to start with " + this.quote(substring));
	}
	,endWith: function(substring,p) {
		if(this.value == null) {
			this.fail("Expected string to end with " + this.quote(substring) + " but string was null","Expected string not to end with " + this.quote(substring) + " but string was null",p);
			return;
		}
		this.test(StringTools.endsWith(this.value,substring),p,"Expected " + this.quote(this.value) + " to end with " + this.quote(substring),"Expected " + this.quote(this.value) + " not to end with " + this.quote(substring));
	}
	,match: function(regexp,p) {
		if(this.value == null) {
			this.fail("Expected string to match regular expression but string was null","Expected string not to match regular expression but string was null",p);
			return;
		}
		this.test(regexp.match(this.value),p,"Expected " + this.quote(this.value) + " to match regular expression","Expected " + this.quote(this.value) + " not to match regular expression");
	}
	,__class__: buddy_ShouldString
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldFunctions = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	this.value = value;
	this.inverse = inverse;
};
buddy_ShouldFunctions.__name__ = "buddy.ShouldFunctions";
buddy_ShouldFunctions.should = function(value) {
	return new buddy_ShouldFunctions(value);
};
buddy_ShouldFunctions.prototype = {
	get_not: function() {
		return new buddy_ShouldFunctions(this.value,!this.inverse);
	}
	,throwAnything: function(p) {
		var caught = false;
		var exception = null;
		try {
			this.value();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			exception = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			caught = true;
		}
		this.test(caught,p,"Expected " + this.quote(this.value) + " to throw anything, nothing was thrown","Expected " + this.quote(this.value) + " not to throw anything, " + this.quote(exception) + " was thrown");
		return exception;
	}
	,throwValue: function(v,p) {
		var exception = null;
		try {
			this.value();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var cause = null;
			exception = cause == null ? ((e) instanceof js__$Boot_HaxeError) ? e.val : e : cause;
		}
		var isCaught = exception == v;
		this.test(isCaught,p,"Expected " + this.quote(this.value) + " to throw " + this.quote(v),"Expected " + this.quote(this.value) + " not to throw " + this.quote(v));
		return exception;
	}
	,throwType: function(type,p) {
		var exception = null;
		try {
			this.value();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var cause = null;
			exception = cause == null ? ((e) instanceof js__$Boot_HaxeError) ? e.val : e : cause;
		}
		var typeName = type.__name__;
		var exceptionName;
		if(exception == null) {
			exceptionName = null;
		} else {
			var c = js_Boot.getClass(exception);
			exceptionName = c.__name__;
		}
		if(exceptionName == null) {
			exceptionName = "no exception";
		}
		var isCaught = js_Boot.__instanceof(exception,type);
		this.test(isCaught,p,"Expected " + this.quote(this.value) + " to throw type " + typeName + ", " + exceptionName + " was thrown instead","Expected " + this.quote(this.value) + " not to throw type " + typeName);
		return exception;
	}
	,be: function(expected,p) {
		this.test(this.value == expected,p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(expected) + " but was equal to that");
	}
	,quote: function(v) {
		if(typeof(v) == "string") {
			return "\"" + Std.string(v) + "\"";
		}
		if(((v) instanceof haxe_ds_List)) {
			return Std.string(Lambda.array(v));
		}
		return Std.string(v);
	}
	,test: function(expr,p,error,errorInverted) {
		if(buddy_SuitesRunner.currentTest == null) {
			throw new js__$Boot_HaxeError("SuitesRunner.currentTest was null");
		}
		if(!this.inverse) {
			var tmp = buddy_SuitesRunner.posInfosToStack(p);
			buddy_SuitesRunner.currentTest(expr,error,tmp);
		} else {
			var tmp1 = buddy_SuitesRunner.posInfosToStack(p);
			buddy_SuitesRunner.currentTest(!expr,errorInverted,tmp1);
		}
	}
	,__class__: buddy_ShouldFunctions
	,__properties__: {get_not:"get_not"}
};
var buddy_SuitesRunner = function(buddySuites,reporter) {
	this.allTestsPassed = false;
	this.unrecoverableErrorStack = null;
	this.unrecoverableError = null;
	this.buddySuites = buddySuites;
	this.reporter = reporter == null ? new buddy_reporting_ConsoleReporter() : reporter;
	this.oldLog = haxe_Log.trace;
	this.includeMode = Lambda.exists(buddySuites,function(suite) {
		var metaData = haxe_rtti_Meta.getType(js_Boot.getClass(suite));
		return Object.prototype.hasOwnProperty.call(metaData,"includeMode");
	});
};
buddy_SuitesRunner.__name__ = "buddy.SuitesRunner";
buddy_SuitesRunner.posInfosToStack = function(p) {
	if(p == null) {
		return [haxe_StackItem.FilePos(null,"",0)];
	} else {
		return [haxe_StackItem.FilePos(null,p.fileName,p.lineNumber)];
	}
};
buddy_SuitesRunner.prototype = {
	run: function() {
		var _gthis = this;
		this.runCompleted = new promhx_Deferred();
		var runCompletedPromise = this.runCompleted.promise();
		this.runDescribes(function(err) {
			if(err != null) {
				_gthis.haveUnrecoverableError(err);
				return;
			}
			if(_gthis.includeMode) {
				_gthis.startIncludeMode();
			}
			_gthis.startRun();
		});
		return runCompletedPromise;
	}
	,runDescribes: function(cb) {
		var _gthis = this;
		var asyncQueue = [];
		var syncQueue = [];
		var processSuiteDescribes = function(suite) {
			while(!Lambda.empty(suite.describeQueue)) {
				var current = suite.describeQueue.pop();
				var _g = current.spec;
				switch(_g._hx_index) {
				case 0:
					var f = _g.f;
					asyncQueue.push({ buddySuite : suite, testSuite : current.suite, run : f});
					break;
				case 1:
					var f1 = _g.f;
					syncQueue.push({ buddySuite : suite, testSuite : current.suite, run : f1});
					break;
				}
			}
		};
		var processBuddySuites = null;
		processBuddySuites = function() {
			var buddySuite = $getIterator(_gthis.buddySuites);
			while(buddySuite.hasNext()) {
				var buddySuite1 = buddySuite.next();
				processSuiteDescribes(buddySuite1);
			}
			if(syncQueue.length > 0) {
				try {
					var _g1 = 0;
					while(_g1 < syncQueue.length) {
						var test = syncQueue[_g1];
						++_g1;
						test.buddySuite.currentSuite = test.testSuite;
						test.run();
					}
				} catch( err ) {
					haxe_CallStack.lastException = err;
					cb(((err) instanceof js__$Boot_HaxeError) ? err.val : err);
					return;
				}
				syncQueue = [];
				processBuddySuites();
			} else if(asyncQueue.length > 0) {
				AsyncTools.aEachSeries(asyncQueue,function(test1,cb1) {
					test1.buddySuite.currentSuite = test1.testSuite;
					test1.run(function() {
						cb1(null);
					});
				},function(err1) {
					if(err1 != null) {
						cb(err1);
						return;
					}
					asyncQueue = [];
					processBuddySuites();
				});
			} else {
				cb(null);
			}
		};
		processBuddySuites();
	}
	,failed: function() {
		return !this.allTestsPassed;
	}
	,statusCode: function() {
		if(this.failed()) {
			return 1;
		} else {
			return 0;
		}
	}
	,startRun: function() {
		var _gthis = this;
		var r = this.reporter.start();
		r.then(function(go) {
			if(!go) {
				var r1 = _gthis.reporter.done([],false);
				r1.then(function(_) {
					_gthis.runCompleted.resolve(_gthis);
				});
				return;
			}
			var beforeEachStack = [[]];
			var afterEachStack = [[]];
			AsyncTools.aMapSeries(_gthis.buddySuites,function(buddySuite,done) {
				var suiteDone = function(err,suite) {
					if(err == null && suite == null) {
						return;
					}
					if(err != null) {
						suite.error = err;
						suite.stack = haxe_CallStack.exceptionStack();
					}
					done(err,suite);
				};
				var syncSuite = _gthis.mapTestSuite(buddySuite,buddySuite.suite,beforeEachStack,afterEachStack,suiteDone);
				if(syncSuite != null) {
					suiteDone(syncSuite.error,syncSuite.suite);
				}
			},function(err1,suites) {
				if(err1 != null) {
					_gthis.haveUnrecoverableError(err1);
				} else {
					_gthis.allTestsPassed = !Lambda.exists(suites,function(suite1) {
						return !suite1.passed();
					});
					var r2 = _gthis.reporter.done(suites,_gthis.allTestsPassed);
					r2.then(function(_1) {
						_gthis.runCompleted.resolve(_gthis);
					});
				}
			});
		});
	}
	,startIncludeMode: function() {
		var traverse = null;
		traverse = function(suite) {
			suite.specs = suite.specs.filter(function(spec) {
				switch(spec._hx_index) {
				case 0:
					var included = spec.included;
					var suite1 = spec.suite;
					if(included) {
						return true;
					} else {
						return traverse(suite1);
					}
					break;
				case 1:
					var _g6 = spec.time;
					var _g5 = spec.pos;
					var _g3 = spec.test;
					var included1 = spec.included;
					var desc = spec.description;
					return included1;
				}
			});
			return suite.specs.length > 0;
		};
		this.buddySuites = Lambda.filter(this.buddySuites,function(buddySuite) {
			var suiteMeta = haxe_rtti_Meta.getType(js_Boot.getClass(buddySuite));
			if(Object.prototype.hasOwnProperty.call(suiteMeta,"include")) {
				return true;
			}
			return traverse(buddySuite.suite);
		});
	}
	,mapTestSuite: function(buddySuite,testSuite,beforeEachStack,afterEachStack,done) {
		var _gthis = this;
		var currentSuite = buddy_tests_SelfTest.lastSuite = new buddy_Suite(testSuite.description);
		var tmp = Lambda.array(testSuite.beforeEach);
		beforeEachStack.push(tmp);
		var tmp1 = Lambda.array(testSuite.afterEach);
		afterEachStack.unshift(tmp1);
		var allSync = this.isSync(testSuite.beforeAll) && this.isSync(testSuite.afterAll);
		var result = null;
		var syncResultCount = 0;
		this.runTestFuncs(testSuite.beforeAll,function(err) {
			if(err != null) {
				if(_gthis.isSync(testSuite.beforeAll)) {
					result = { error : err, suite : currentSuite};
				} else {
					done(err,currentSuite);
				}
				return;
			}
			AsyncTools.aMapSeries(testSuite.specs,function(testSpec,cb) {
				var result2 = _gthis.mapTestSpec(buddySuite,testSuite,beforeEachStack,afterEachStack,testSpec,cb);
				if(result2 != null) {
					syncResultCount += 1;
					cb(result2.error,result2.step);
				}
			},function(err1,testSteps) {
				allSync = allSync && testSteps.length == syncResultCount;
				if(err1 != null) {
					if(allSync) {
						result = { error : err1, suite : currentSuite};
					} else {
						done(err1,currentSuite);
					}
					return;
				}
				_gthis.runTestFuncs(testSuite.afterAll,function(err2) {
					if(err2 != null) {
						if(allSync) {
							result = { error : err2, suite : currentSuite};
						} else {
							done(err2,currentSuite);
						}
						return;
					}
					currentSuite.steps = testSteps;
					beforeEachStack.pop();
					afterEachStack.shift();
					if(allSync) {
						result = { error : null, suite : currentSuite};
					} else {
						done(null,currentSuite);
					}
				});
			});
		});
		if(result != null) {
			done(null,null);
		}
		return result;
	}
	,runTestFuncs: function(funcs,done) {
		var syncQ = [];
		var asyncQ = [];
		var func = $getIterator(funcs);
		while(func.hasNext()) {
			var func1 = func.next();
			switch(func1._hx_index) {
			case 0:
				var f = func1.f;
				asyncQ.push(f);
				break;
			case 1:
				var f1 = func1.f;
				syncQ.push(f1);
				break;
			}
		}
		try {
			var _g = 0;
			while(_g < syncQ.length) {
				var f2 = syncQ[_g];
				++_g;
				f2();
			}
		} catch( err ) {
			haxe_CallStack.lastException = err;
			done(((err) instanceof js__$Boot_HaxeError) ? err.val : err);
			return;
		}
		AsyncTools.aEachSeries(asyncQ,function(f3,done1) {
			f3(function() {
				done1();
			});
		},done);
	}
	,flatten: function(arr) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < arr.length) {
			var a = arr[_g1];
			++_g1;
			var _g11 = 0;
			while(_g11 < a.length) {
				var b = a[_g11];
				++_g11;
				_g.push(b);
			}
		}
		return _g;
	}
	,isSync: function(funcs) {
		var f = $getIterator(funcs);
		while(f.hasNext()) {
			var f1 = f.next();
			if(f1._hx_index == 0) {
				var _g = f1.f;
				return false;
			}
		}
		return true;
	}
	,mapTestSpec: function(buddySuite,testSuite,beforeEachStack,afterEachStack,testSpec,done) {
		var _gthis = this;
		var hasCompleted = false;
		var oldFail = null;
		oldFail = buddySuite.fail = function(err,p) {
			if(err == null) {
				err = "Exception";
			}
			if(!hasCompleted && oldFail == buddySuite.fail) {
				done(err,null);
			}
		};
		var oldPending = buddySuite.pending = function(message,p1) {
			done("Cannot call pending here.",null);
		};
		switch(testSpec._hx_index) {
		case 0:
			var _g1 = testSpec.included;
			var testSuite1 = testSpec.suite;
			var result = this.mapTestSuite(buddySuite,testSuite1,beforeEachStack,afterEachStack,function(err1,newSuite) {
				if(err1 == null && newSuite == null) {
					return;
				}
				if(err1 != null) {
					done(err1,null);
				} else {
					done(null,buddy_Step.TSuite(newSuite));
				}
			});
			if(result != null) {
				return { error : result.error, step : buddy_Step.TSuite(result.suite)};
			} else {
				return null;
			}
			break;
		case 1:
			var _g4 = testSpec.included;
			var time = testSpec.time;
			var pos = testSpec.pos;
			var test = testSpec.test;
			var desc = testSpec.description;
			var spec = buddy_tests_SelfTest.lastSpec = new buddy_Spec(desc,pos.fileName);
			var beforeEach = this.flatten(beforeEachStack);
			var afterEach = this.flatten(afterEachStack);
			var eachIsSync = this.isSync(beforeEach) && this.isSync(afterEach);
			var returnSync;
			if(test == null) {
				returnSync = eachIsSync;
			} else {
				switch(test._hx_index) {
				case 0:
					var _g11 = test.f;
					returnSync = false;
					break;
				case 1:
					var _g = test.f;
					returnSync = eachIsSync;
					break;
				}
			}
			if(!buddy_BuddySuite.useDefaultTrace) {
				haxe_Log.trace = function(v,pos1) {
					if(pos1 == null) {
						spec.traces.push(Std.string(v));
					} else {
						var output;
						if(pos1.customParams != null) {
							var output1 = Std.string(v) + ",";
							var _this = pos1.customParams;
							var result1 = new Array(_this.length);
							var _g2 = 0;
							var _g12 = _this.length;
							while(_g2 < _g12) {
								var i = _g2++;
								result1[i] = Std.string(_this[i]);
							}
							output = output1 + result1.join(",");
						} else {
							output = Std.string(v);
						}
						spec.traces.push(pos1.fileName + ":" + pos1.lineNumber + ": " + output);
					}
				};
			}
			var reportFailure = function(error,stack) {
				if(hasCompleted) {
					return;
				}
				spec.status = buddy_SpecStatus.Failed;
				spec.failures.push(new buddy_Failure(error,stack));
			};
			var specCompleted = function(status) {
				if(hasCompleted) {
					return null;
				}
				hasCompleted = true;
				if(spec.status == buddy_SpecStatus.Unknown) {
					spec.status = status;
				}
				if(!buddy_BuddySuite.useDefaultTrace) {
					haxe_Log.trace = _gthis.oldLog;
				}
				buddySuite.fail = oldFail;
				buddySuite.pending = oldPending;
				var syncResult = null;
				_gthis.runTestFuncs(afterEach,function(err2) {
					if(returnSync) {
						syncResult = { error : err2, step : err2 == null ? buddy_Step.TSpec(spec) : null};
						_gthis.reporter.progress(spec);
					} else if(err2 != null) {
						done(err2,null);
					} else {
						var r = _gthis.reporter.progress(spec);
						r.then(function(_) {
							done(null,buddy_Step.TSpec(spec));
						});
					}
				});
				return syncResult;
			};
			if(test == null) {
				return specCompleted(buddy_SpecStatus.Pending);
			}
			buddy_SuitesRunner.currentTest = function(testStatus,error1,stack1) {
				if(testStatus != true) {
					reportFailure(error1,stack1);
				}
			};
			if(!returnSync && buddySuite.timeoutMs > 0) {
				var r1 = buddy_tools_AsyncTools.wait(buddySuite.timeoutMs);
				r1.catchError(function(e) {
					var tmp = haxe_CallStack.exceptionStack();
					reportFailure(e,tmp);
					specCompleted(buddy_SpecStatus.Failed);
				});
				r1.then(function(_1) {
					reportFailure("Timeout after " + buddySuite.timeoutMs + " ms",[]);
					specCompleted(buddy_SpecStatus.Failed);
				});
			}
			var _syncResult = null;
			var _startTime = Date.now() / 1000;
			var setSyncResult = function(status1) {
				if(!returnSync || _syncResult != null) {
					return;
				}
				_syncResult = status1;
				var setSyncResult1 = Date.now() / 1000;
				spec.time = setSyncResult1 - _startTime;
			};
			buddySuite.fail = function(err3,p2) {
				if(err3 == null) {
					err3 = "Manually";
				}
				var tmp1 = buddy_SuitesRunner.posInfosToStack(p2);
				reportFailure(err3,tmp1);
				var tmp2 = specCompleted(buddy_SpecStatus.Failed);
				setSyncResult(tmp2);
			};
			buddySuite.pending = function(message1,p3) {
				var msg = p3.fileName + ":" + p3.lineNumber + (message1 != null ? ": " + message1 : "");
				spec.traces.push(msg);
				var tmp3 = specCompleted(buddy_SpecStatus.Pending);
				setSyncResult(tmp3);
			};
			this.runTestFuncs(beforeEach,function(err4) {
				if(err4 != null) {
					if(returnSync) {
						setSyncResult({ error : err4, step : null});
					} else {
						done(err4,null);
					}
					return;
				}
				var runTestFunc = function(func,done1) {
					try {
						switch(func._hx_index) {
						case 0:
							var f = func.f;
							f(function() {
								done1(null);
							});
							break;
						case 1:
							var f1 = func.f;
							f1();
							done1(null);
							break;
						}
					} catch( e1 ) {
						haxe_CallStack.lastException = e1;
						done1(((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1);
					}
				};
				runTestFunc(test,function(err5) {
					if(err5 != null) {
						var tmp4 = haxe_CallStack.exceptionStack();
						reportFailure(err5,tmp4);
						var tmp5 = specCompleted(buddy_SpecStatus.Failed);
						setSyncResult(tmp5);
					} else {
						var tmp6 = specCompleted(buddy_SpecStatus.Passed);
						setSyncResult(tmp6);
					}
				});
			});
			return _syncResult;
		}
	}
	,haveUnrecoverableError: function(err) {
		this.unrecoverableError = err;
		this.unrecoverableErrorStack = haxe_CallStack.exceptionStack();
		this.runCompleted.resolve(this);
	}
	,__class__: buddy_SuitesRunner
};
var buddy_internal_GenerateMain = function() { };
buddy_internal_GenerateMain.__name__ = "buddy.internal.GenerateMain";
var buddy_internal_sys_NodeJs = function() { };
buddy_internal_sys_NodeJs.__name__ = "buddy.internal.sys.NodeJs";
buddy_internal_sys_NodeJs.print = function(s) {
	process.stdout.write(s);
};
buddy_internal_sys_NodeJs.println = function(s) {
	console.log(s);
};
var buddy_reporting_Reporter = function() { };
buddy_reporting_Reporter.__name__ = "buddy.reporting.Reporter";
buddy_reporting_Reporter.__isInterface__ = true;
buddy_reporting_Reporter.prototype = {
	__class__: buddy_reporting_Reporter
};
var buddy_reporting_TraceReporter = function(colors) {
	if(colors == null) {
		colors = false;
	}
	this.colors = colors;
};
buddy_reporting_TraceReporter.__name__ = "buddy.reporting.TraceReporter";
buddy_reporting_TraceReporter.__interfaces__ = [buddy_reporting_Reporter];
buddy_reporting_TraceReporter.prototype = {
	start: function() {
		return this.resolveImmediately(true);
	}
	,progress: function(spec) {
		return this.resolveImmediately(spec);
	}
	,done: function(suites,status) {
		var _gthis = this;
		this.println("");
		var total = 0;
		var failures = 0;
		var pending = 0;
		var countTests = null;
		var printTests = null;
		countTests = function(s) {
			if(s.error != null) {
				failures += 1;
			}
			var _g = 0;
			var _g1 = s.steps;
			while(_g < _g1.length) {
				var sp = _g1[_g];
				++_g;
				switch(sp._hx_index) {
				case 0:
					var s1 = sp.s;
					countTests(s1);
					break;
				case 1:
					var sp1 = sp.s;
					total += 1;
					if(sp1.status == buddy_SpecStatus.Failed) {
						failures += 1;
					} else if(sp1.status == buddy_SpecStatus.Pending) {
						pending += 1;
					}
					break;
				}
			}
		};
		Lambda.iter(suites,countTests);
		printTests = function(s2,indentLevel) {
			var success = true;
			var lines = [];
			var print = function(str,color) {
				if(color == null) {
					color = 39;
				}
				var start = _gthis.strCol(color);
				var end = _gthis.strCol(39);
				var print1 = start + StringTools.lpad(str," ",str.length + (Math.max(0,indentLevel * 2) | 0)) + end;
				lines.push(print1);
			};
			var printStack = function(indent,stack) {
				if(stack == null || stack.length == 0) {
					return;
				}
				var _g2 = 0;
				while(_g2 < stack.length) {
					var s3 = stack[_g2];
					++_g2;
					if(s3._hx_index == 2) {
						var _g3 = s3.column;
						var _g4 = s3.s;
						var line = s3.line;
						var file = s3.file;
						if(line > 0 && file.indexOf("buddy/internal/") != 0 && file.indexOf("buddy.SuitesRunner") != 0) {
							print(indent + ("@ " + file + ":" + line),33);
						}
					}
				}
			};
			var printTraces = function(spec) {
				var _g5 = 0;
				var _g11 = spec.traces;
				while(_g5 < _g11.length) {
					var t = _g11[_g5];
					++_g5;
					print("    " + t,33);
				}
			};
			if(s2.description.length > 0) {
				print(s2.description);
			}
			if(s2.error != null) {
				print("ERROR: " + Std.string(s2.error),31);
				printStack("  ",s2.stack);
				return { success : false, lines : lines};
			}
			var _g6 = 0;
			var _g12 = s2.steps;
			while(_g6 < _g12.length) {
				var step = _g12[_g6];
				++_g6;
				switch(step._hx_index) {
				case 0:
					var s4 = step.s;
					var ret = printTests(s4,indentLevel + 1);
					success = success && ret.success;
					lines = lines.concat(ret.lines);
					break;
				case 1:
					var sp2 = step.s;
					success = success && sp2.status == buddy_SpecStatus.Passed;
					if(sp2.status == buddy_SpecStatus.Failed) {
						print("  " + sp2.description + " (FAILED)",31);
						printTraces(sp2);
						var _g7 = 0;
						var _g13 = sp2.failures;
						while(_g7 < _g13.length) {
							var failure = _g13[_g7];
							++_g7;
							print("    " + Std.string(failure.error),33);
							printStack("      ",failure.stack);
						}
					} else {
						print("  " + sp2.description + " (" + Std.string(sp2.status) + ")",sp2.status == buddy_SpecStatus.Passed ? 32 : 33);
						printTraces(sp2);
					}
					break;
				}
			}
			return { success : success, lines : lines};
		};
		Lambda.iter(suites,function(s5) {
			var ret1 = printTests(s5,-1);
			Lambda.iter(ret1.lines,$bind(_gthis,_gthis.println));
		});
		var totalColor = failures > 0 ? 31 : 32;
		var pendingColor = pending > 0 ? 33 : totalColor;
		this.println(this.strCol(totalColor) + ("" + total + " specs, " + failures + " failures, ") + this.strCol(pendingColor) + ("" + pending + " pending") + this.strCol(39));
		return this.resolveImmediately(suites);
	}
	,print: function(s) {
	}
	,println: function(s) {
		haxe_Log.trace(s,{ fileName : "buddy/reporting/TraceReporter.hx", lineNumber : 159, className : "buddy.reporting.TraceReporter", methodName : "println"});
	}
	,strCol: function(color) {
		if(this.colors) {
			return buddy_reporting__$TraceReporter_Color_$Impl_$.ansiCode(color);
		} else {
			return "";
		}
	}
	,resolveImmediately: function(o) {
		var def = new promhx_Deferred();
		var pr = def.promise();
		def.resolve(o);
		return pr;
	}
	,__class__: buddy_reporting_TraceReporter
};
var buddy_reporting_ConsoleReporter = function(colors) {
	if(colors == null) {
		colors = false;
	}
	this.progressString = "";
	buddy_reporting_TraceReporter.call(this,colors);
};
buddy_reporting_ConsoleReporter.__name__ = "buddy.reporting.ConsoleReporter";
buddy_reporting_ConsoleReporter.__super__ = buddy_reporting_TraceReporter;
buddy_reporting_ConsoleReporter.prototype = $extend(buddy_reporting_TraceReporter.prototype,{
	start: function() {
		return this.resolveImmediately(true);
	}
	,progress: function(spec) {
		var status;
		switch(spec.status._hx_index) {
		case 0:
			status = this.strCol(33) + "?";
			break;
		case 1:
			status = this.strCol(32) + ".";
			break;
		case 2:
			status = this.strCol(33) + "P";
			break;
		case 3:
			status = this.strCol(31) + "X";
			break;
		}
		this.progressString += status;
		this.print(status + this.strCol(39));
		return this.resolveImmediately(spec);
	}
	,done: function(suites,status) {
		var output = buddy_reporting_TraceReporter.prototype.done.call(this,suites,status);
		return output;
	}
	,print: function(s) {
		buddy_internal_sys_NodeJs.print(s);
	}
	,println: function(s) {
		buddy_internal_sys_NodeJs.println(s);
	}
	,__class__: buddy_reporting_ConsoleReporter
});
var buddy_reporting_ConsoleColorReporter = function(colors) {
	if(colors == null) {
		colors = true;
	}
	buddy_reporting_ConsoleReporter.call(this,colors);
};
buddy_reporting_ConsoleColorReporter.__name__ = "buddy.reporting.ConsoleColorReporter";
buddy_reporting_ConsoleColorReporter.__super__ = buddy_reporting_ConsoleReporter;
buddy_reporting_ConsoleColorReporter.prototype = $extend(buddy_reporting_ConsoleReporter.prototype,{
	__class__: buddy_reporting_ConsoleColorReporter
});
var buddy_reporting__$TraceReporter_Color_$Impl_$ = {};
buddy_reporting__$TraceReporter_Color_$Impl_$.__name__ = "buddy.reporting._TraceReporter.Color_Impl_";
buddy_reporting__$TraceReporter_Color_$Impl_$.ansiCode = function(this1) {
	return "\x1B" + ("[" + this1 + "m");
};
var buddy_tests_SelfTest = function() { };
buddy_tests_SelfTest.__name__ = "buddy.tests.SelfTest";
buddy_tests_SelfTest.passLastSpecIf = function(expr,failReason) {
	if(expr) {
		buddy_tests_SelfTest.setLastSpec(buddy_SpecStatus.Passed);
	} else {
		buddy_tests_SelfTest.setLastSpec(buddy_SpecStatus.Failed);
		buddy_tests_SelfTest.lastSpec.failures.push(new buddy_Failure(failReason,[]));
	}
};
buddy_tests_SelfTest.setLastSpec = function(status) {
	Reflect.setProperty(buddy_tests_SelfTest.lastSpec,"status",status);
};
var buddy_tools_AsyncTools = function() { };
buddy_tools_AsyncTools.__name__ = "buddy.tools.AsyncTools";
buddy_tools_AsyncTools.iterateAsyncBool = function(it,action) {
	return buddy_tools_AsyncTools.iterateAsync(it,action,true);
};
buddy_tools_AsyncTools.iterateAsync = function(it,action,resolveWith) {
	var finished = new promhx_Deferred();
	var pr = finished.promise();
	buddy_tools_AsyncTools.next($getIterator(it),action,finished,resolveWith);
	return pr;
};
buddy_tools_AsyncTools.wait = function(ms) {
	var def = new promhx_Deferred();
	var pr = def.promise();
	var done = function() {
		if(!pr._fulfilled) {
			def.resolve(true);
		}
	};
	haxe_Timer.delay(function() {
		done();
	},ms);
	return pr;
};
buddy_tools_AsyncTools.next = function(it,action,def,resolveWith) {
	if(!it.hasNext()) {
		def.resolve(resolveWith);
	} else {
		var n = it.next();
		var r = action(n);
		r.then(function(_) {
			buddy_tools_AsyncTools.next(it,action,def,resolveWith);
		});
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int32_Int32_$Impl_$ = {};
haxe__$Int32_Int32_$Impl_$.__name__ = "haxe._Int32.Int32_Impl_";
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,filter: function(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw new js__$Boot_HaxeError("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			haxe_CallStack.lastException = eof;
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
				}
				total.addBytes(buf,0,len);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
			} else {
				throw e;
			}
		}
		return total.getBytes();
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = "haxe.io.Output";
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_Zlib = require("zlib");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = "js.node.buffer._Buffer.Helper";
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var opentype_BytesHelper = function() { };
opentype_BytesHelper.__name__ = "opentype.BytesHelper";
opentype_BytesHelper.fromCharCodes = function(codes) {
	return Lambda.fold(codes,function(c,r) {
		return r + String.fromCodePoint(c);
	},"");
};
opentype_BytesHelper.readU8 = function(bytes,position) {
	if(position == null) {
		position = 0;
	}
	return bytes.b[position];
};
opentype_BytesHelper.readChar = function(bytes,position) {
	if(position == null) {
		position = 0;
	}
	var position1 = position;
	if(position1 == null) {
		position1 = 0;
	}
	var n = bytes.b[position1];
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
opentype_BytesHelper.readU16BE = function(bytes,position) {
	if(position == null) {
		position = 0;
	}
	var first = bytes.b[position];
	var second = bytes.b[position + 1];
	return first * 256 + second;
};
opentype_BytesHelper.readS16BE = function(bytes,position) {
	var position1 = position;
	if(position1 == null) {
		position1 = 0;
	}
	var ch1 = bytes.b[position1];
	var position2 = position + 1;
	if(position2 == null) {
		position2 = 0;
	}
	var ch2 = bytes.b[position2];
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
opentype_BytesHelper.readULong = function(p,position) {
	if(position == null) {
		position = 0;
	}
	var position1 = position;
	if(position1 == null) {
		position1 = 0;
	}
	var ch1 = p.b[position1];
	var position2 = position + 1;
	if(position2 == null) {
		position2 = 0;
	}
	var ch2 = p.b[position2];
	var position3 = position + 2;
	if(position3 == null) {
		position3 = 0;
	}
	var ch3 = p.b[position3];
	var position4 = position + 3;
	if(position4 == null) {
		position4 = 0;
	}
	var ch4 = p.b[position4];
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
opentype_BytesHelper.getFixed = function(p,position) {
	if(position == null) {
		position = 0;
	}
	var position1 = position;
	if(position1 == null) {
		position1 = 0;
	}
	var first = p.b[position1];
	var second = p.b[position1 + 1];
	var decimal = first * 256 + second;
	var position2 = position + 2;
	if(position2 == null) {
		position2 = 0;
	}
	var first1 = p.b[position2];
	var second1 = p.b[position2 + 1];
	var fraction = first1 * 256 + second1;
	return decimal + fraction / 65535;
};
var opentype_Check = function() { };
opentype_Check.__name__ = "opentype.Check";
opentype_Check.assert = function(predicate,message) {
	if(!predicate) {
		throw new js__$Boot_HaxeError(message);
	}
};
var opentype_Compression = $hxEnums["opentype.Compression"] = { __ename__ : true, __constructs__ : ["None","Woff","Woff2"]
	,None: {_hx_index:0,__enum__:"opentype.Compression",toString:$estr}
	,Woff: {_hx_index:1,__enum__:"opentype.Compression",toString:$estr}
	,Woff2: {_hx_index:2,__enum__:"opentype.Compression",toString:$estr}
};
var opentype_IEncoding = function() { };
opentype_IEncoding.__name__ = "opentype.IEncoding";
opentype_IEncoding.__isInterface__ = true;
opentype_IEncoding.prototype = {
	__class__: opentype_IEncoding
};
var opentype_DefaultEncoding = function(font) {
	this.glyphs = font.glyphs != null ? font.glyphs : new opentype_GlyphSet(font);
};
opentype_DefaultEncoding.__name__ = "opentype.DefaultEncoding";
opentype_DefaultEncoding.__interfaces__ = [opentype_IEncoding];
opentype_DefaultEncoding.prototype = {
	hasChar: function(char) {
		return false;
	}
	,charToGlyphIndex: function(code) {
		var _g = 0;
		var _g1 = this.glyphs.length;
		while(_g < _g1) {
			var i = _g++;
			var glyph = this.glyphs.get(i);
			var _g2 = 0;
			var _g11 = glyph.unicodes.length;
			while(_g2 < _g11) {
				var j = _g2++;
				if(glyph.unicodes[j] == code) {
					return i;
				}
			}
		}
		return -1;
	}
	,__class__: opentype_DefaultEncoding
};
var opentype_CmapEncoding = function(cmap) {
	this.cmap = cmap;
};
opentype_CmapEncoding.__name__ = "opentype.CmapEncoding";
opentype_CmapEncoding.__interfaces__ = [opentype_IEncoding];
opentype_CmapEncoding.prototype = {
	hasChar: function(char) {
		return this.cmap.glyphIndexMap.h.hasOwnProperty(char);
	}
	,charToGlyphIndex: function(cpa) {
		if(this.cmap.glyphIndexMap.h.hasOwnProperty(cpa)) {
			return this.cmap.glyphIndexMap.h[cpa];
		} else {
			return 0;
		}
	}
	,__class__: opentype_CmapEncoding
};
var opentype_Encoding = function() { };
opentype_Encoding.__name__ = "opentype.Encoding";
opentype_Encoding.addGlyphNames = function(font,lowMemory) {
	if(!lowMemory) {
		opentype_Encoding.addGlyphNamesAll(font);
	}
};
opentype_Encoding.addGlyphNamesAll = function(font) {
	var glyph;
	var _g = new haxe_iterators_MapKeyValueIterator(font.tables.cmap.glyphIndexMap);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var char = _g1.key;
		var index = _g1.value;
		glyph = font.glyphs.get(index);
		glyph.addUnicode(char);
	}
};
var opentype_Flavor = $hxEnums["opentype.Flavor"] = { __ename__ : true, __constructs__ : ["Ttf","Cff"]
	,Ttf: {_hx_index:0,__enum__:"opentype.Flavor",toString:$estr}
	,Cff: {_hx_index:1,__enum__:"opentype.Flavor",toString:$estr}
};
var opentype_Font = function(options) {
	this.tables = options != null && options.tables != null ? options.tables : new opentype_tables_Tables();
	var tmp = options != null;
	this.glyphs = new opentype_GlyphSet(this,options != null && options.glyphs != null ? options.glyphs : []);
	this.encoding = new opentype_DefaultEncoding(this);
	this.position = new opentype_Position(this);
};
opentype_Font.__name__ = "opentype.Font";
opentype_Font.prototype = {
	getKerningValueForIndexes: function(leftIndex,rightIndex) {
		if(this.position.hasKerningTables()) {
			return this.position.getKerningValue(leftIndex,rightIndex);
		}
		var kp = leftIndex + "," + rightIndex;
		var _this = this.kerningPairs;
		if(__map_reserved[kp] != null ? _this.existsReserved(kp) : _this.h.hasOwnProperty(kp)) {
			var _this1 = this.kerningPairs;
			if(__map_reserved[kp] != null) {
				return _this1.getReserved(kp);
			} else {
				return _this1.h[kp];
			}
		} else {
			return 0;
		}
	}
	,getKerningValue: function(leftGlyph,rightGlyph) {
		return this.getKerningValueForIndexes(leftGlyph.index,rightGlyph.index);
	}
	,hasChar: function(code) {
		return this.encoding.hasChar(code);
	}
	,charToGlyphIndex: function(s) {
		return this.encoding.charToGlyphIndex(s);
	}
	,charToGlyph: function(c) {
		var glyphIndex = this.charToGlyphIndex(c);
		var glyph = this.glyphs.get(glyphIndex);
		if(glyph == null) {
			glyph = this.glyphs.get(0);
		}
		return glyph;
	}
	,__class__: opentype_Font
};
var opentype_HorizontalMetrics = function(advanceWidth,leftSideBearing) {
};
opentype_HorizontalMetrics.__name__ = "opentype.HorizontalMetrics";
opentype_HorizontalMetrics.prototype = {
	__class__: opentype_HorizontalMetrics
};
var opentype_FontOptions = function(names,unitsPerEm,ascender,descender,createdTimestamp,weightClass,widthClass,fsSelection,glyphs,tables) {
	this.names = names;
	this.unitsPerEm = unitsPerEm;
	this.ascender = ascender;
	this.descender = descender;
	this.createdTimestamp = createdTimestamp;
	this.weightClass = weightClass;
	this.widthClass = widthClass;
	this.fsSelection = fsSelection;
	this.glyphs = glyphs;
	this.tables = tables;
};
opentype_FontOptions.__name__ = "opentype.FontOptions";
opentype_FontOptions.prototype = {
	__class__: opentype_FontOptions
};
var opentype_FontNames = function(fontFamily,styleName,fontSubfamily,fullName,postScriptName,designer,designerURL,manufacturer,manufacturerURL,license,licenseURL,version,description,copyright,trademark) {
	this.fontFamily = fontFamily;
	this.styleName = styleName;
	this.fontSubfamily = fontSubfamily;
	this.fullName = fullName;
	this.postScriptName = postScriptName;
	this.designer = designer;
	this.designerURL = designerURL;
	this.manufacturer = manufacturer;
	this.manufacturerURL = manufacturerURL;
	this.license = license;
	this.licenseURL = licenseURL;
	this.version = version;
	this.description = description;
	this.copyright = copyright;
	this.trademark = trademark;
};
opentype_FontNames.__name__ = "opentype.FontNames";
opentype_FontNames.prototype = {
	__class__: opentype_FontNames
};
var opentype_Glyph = function(options) {
	this.index = options.index > 0 ? options.index : 0;
	this.name = options.name;
	this.unicode = options.unicode > 0 ? options.unicode : 0;
	this.unicodes = options.unicodes != null ? options.unicodes : options.unicode > 0 ? [options.unicode] : [];
};
opentype_Glyph.__name__ = "opentype.Glyph";
opentype_Glyph.prototype = {
	addUnicode: function(unicode) {
		if(this.unicodes.length == 0) {
			this.unicode = unicode;
		}
		this.unicodes.push(unicode);
	}
	,__class__: opentype_Glyph
};
var opentype_GlyphOptions = function(name,index,unicode,advanceWidth,path) {
	this.name = name;
	this.index = index;
	this.unicode = unicode;
	this.advanceWidth = advanceWidth;
	this.path = path;
};
opentype_GlyphOptions.__name__ = "opentype.GlyphOptions";
opentype_GlyphOptions.prototype = {
	__class__: opentype_GlyphOptions
};
var opentype_GlyphWrapper = function(glyph,loader) {
	this.glyph = glyph;
	this.loader = loader;
};
opentype_GlyphWrapper.__name__ = "opentype.GlyphWrapper";
opentype_GlyphWrapper.prototype = {
	__class__: opentype_GlyphWrapper
};
var opentype_GlyphSet = function(font,glyphs) {
	this.glyphs = new haxe_ds_IntMap();
	this.glyphLoaders = new haxe_ds_IntMap();
	if(glyphs != null) {
		var _g = 0;
		var _g1 = glyphs.length;
		while(_g < _g1) {
			var i = _g++;
			var glyph = glyphs[i];
			var this1 = this.glyphs;
			var v = new opentype_GlyphWrapper(glyph,null);
			this1.h[i] = v;
		}
	}
};
opentype_GlyphSet.__name__ = "opentype.GlyphSet";
opentype_GlyphSet.glyphLoader = function(font,index) {
	return function() {
		return new opentype_Glyph(new opentype_GlyphOptions(null,index,null,null,null));
	};
};
opentype_GlyphSet.ttfGlyphLoader = function(font,index,data,position) {
	return function() {
		var glyph = new opentype_Glyph(new opentype_GlyphOptions(null,index,null,null,null));
		return glyph;
	};
};
opentype_GlyphSet.cffGlyphLoader = function(font,index,parseCFFCharstring,charstring) {
	return function() {
		var glyph = new opentype_Glyph(new opentype_GlyphOptions(null,index,null,null,null));
		return glyph;
	};
};
opentype_GlyphSet.prototype = {
	addGlyph: function(index,glyph) {
		var this1 = this.glyphs;
		var v = new opentype_GlyphWrapper(glyph,null);
		this1.h[index] = v;
		this.length++;
	}
	,addGlyphLoader: function(index,loader) {
		var this1 = this.glyphs;
		var v = new opentype_GlyphWrapper(null,loader);
		this1.h[index] = v;
		this.length++;
	}
	,get: function(index) {
		if(this.glyphs.h[index].glyph == null) {
			this.glyphs.h[index].glyph = this.glyphs.h[index].loader();
		}
		return this.glyphs.h[index].glyph;
	}
	,__class__: opentype_GlyphSet
};
var opentype_Layout = function(font,tableName) {
	this.font = font;
	this.tableName = tableName;
};
opentype_Layout.__name__ = "opentype.Layout";
opentype_Layout.prototype = {
	Layout: function(font,tableName) {
		this.font = font;
		this.tableName = tableName;
	}
	,searchTag: function(arr,tag) {
		var imin = 0;
		var imax = arr.length - 1;
		while(imin <= imax) {
			var imid = imin + imax >>> 1;
			var val = arr[imid].tag;
			if(val == tag) {
				return imid;
			} else if(val < tag) {
				imin = imid + 1;
			} else {
				imax = imid - 1;
			}
		}
		return -imin - 1;
	}
	,binSearch: function(arr,value) {
		var imin = 0;
		var imax = arr.length - 1;
		while(imin <= imax) {
			var imid = imin + imax >>> 1;
			var val = arr[imid];
			if(val == value) {
				return imid;
			} else if(val < value) {
				imin = imid + 1;
			} else {
				imax = imid - 1;
			}
		}
		return -imin - 1;
	}
	,searchRange: function(ranges,value) {
		var range;
		var imin = 0;
		var imax = ranges.length - 1;
		while(imin <= imax) {
			var imid = imin + imax >>> 1;
			range = ranges[imid];
			var start = range.start;
			if(start == value) {
				return range;
			} else if(start < value) {
				imin = imid + 1;
			} else {
				imax = imid - 1;
			}
		}
		if(imin > 0) {
			range = ranges[imin - 1];
			if(value > range.end) {
				return null;
			}
			return range;
		}
		return null;
	}
	,getTable: function(create) {
		if(create == null) {
			create = false;
		}
		var key = this.tableName;
		var _this = this.font.tables.layoutTables;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = this.tableName;
			var _this1 = this.font.tables.layoutTables;
			if(__map_reserved[key1] != null) {
				return _this1.getReserved(key1);
			} else {
				return _this1.h[key1];
			}
		} else if(create) {
			var this1 = this.font.tables.layoutTables;
			var k = this.tableName;
			var v = this.createDefaultTable();
			var _this2 = this1;
			if(__map_reserved[k] != null) {
				_this2.setReserved(k,v);
			} else {
				_this2.h[k] = v;
			}
			return v;
		} else {
			return null;
		}
	}
	,getScriptNames: function() {
		var layout = this.getTable();
		if(layout != null) {
			return [];
		}
		var _this = layout.scripts;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].tag;
		}
		return result;
	}
	,getDefaultScriptName: function() {
		var layout = this.getTable();
		if(layout == null) {
			return "";
		}
		var hasLatn = false;
		var _g = 0;
		var _g1 = layout.scripts.length;
		while(_g < _g1) {
			var i = _g++;
			var name = layout.scripts[i].tag;
			if(name == "DFLT") {
				return name;
			}
			if(name == "latn") {
				hasLatn = true;
			}
		}
		if(hasLatn) {
			return "latn";
		} else {
			return "";
		}
	}
	,getScriptTable: function(script,create) {
		if(create == null) {
			create = false;
		}
		var layout = this.getTable(create);
		if(layout != null) {
			script = script != null ? script : "DFLT";
			var scripts = layout.scripts;
			var pos = this.searchTag(layout.scripts,script);
			if(pos >= 0) {
				return scripts[pos].script;
			} else if(create) {
				var scr = new opentype_tables_ScriptRecord(script,new opentype_tables_Script(new opentype_tables_LangSys(0,65535,[]),[]));
				var _pos = -1 - pos;
				var a = scripts.slice(0,_pos);
				a.push(scr);
				layout.scripts = a.concat(scripts.slice(_pos));
				return scr.script;
			}
		}
		return null;
	}
	,getLangSysTable: function(script,language,create) {
		var scriptTable = this.getScriptTable(script,create);
		if(scriptTable != null) {
			if(language == null || language == "dflt" || language == "DFLT") {
				return scriptTable.defaultLangSys;
			}
			var pos = this.searchTag(scriptTable.langSysRecords,language);
			if(pos >= 0) {
				return scriptTable.langSysRecords[pos].langSys;
			} else if(create) {
				var langSysRecord = new opentype_tables_LangSysRecord(language,new opentype_tables_LangSys(0,65535,[]));
				throw new js__$Boot_HaxeError("Fix uncommented line below");
			}
		}
		return null;
	}
	,getFeatureTable: function(script,language,feature,create) {
		var langSysTable = this.getLangSysTable(script,language,create);
		if(langSysTable != null) {
			var featureRecord;
			var featIndexes = langSysTable.featureIndexes;
			var key = this.tableName;
			var _this = this.font.tables.layoutTables;
			var allFeatures = (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).features;
			var _g = 0;
			var _g1 = featIndexes.length;
			while(_g < _g1) {
				var i = _g++;
				featureRecord = allFeatures[featIndexes[i]];
				if(featureRecord.tag == feature) {
					return featureRecord.feature;
				}
			}
			if(create) {
				var index = allFeatures.length;
				opentype_Check.assert(index == 0 || feature >= allFeatures[index - 1].tag,"Features must be added in alphabetical order.");
				featureRecord = new opentype_tables_FeatureTable(feature,new opentype_tables_Feature(0,[]));
				allFeatures.push(featureRecord);
				featIndexes.push(index);
				return featureRecord.feature;
			}
		}
		return null;
	}
	,getLookupTables: function(script,language,feature,lookupType,create) {
		var featureTable = this.getFeatureTable(script,language,feature,create);
		var tables = [];
		if(featureTable != null) {
			var lookupTable;
			var lookupListIndexes = featureTable.lookupListIndexes;
			var key = this.tableName;
			var _this = this.font.tables.layoutTables;
			var allLookups = (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).lookups;
			var _g = 0;
			var _g1 = lookupListIndexes.length;
			while(_g < _g1) {
				var i = _g++;
				lookupTable = allLookups[lookupListIndexes[i]];
				if(lookupTable.lookupType == lookupType) {
					tables.push(lookupTable);
				}
			}
			if(tables.length == 0 && create) {
				lookupTable = new opentype_tables_LookupTable(lookupType,0,[],null);
				var index = allLookups.length;
				allLookups.push(lookupTable);
				lookupListIndexes.push(index);
				return [lookupTable];
			}
		}
		return tables;
	}
	,getGlyphClass: function(classDefTable,glyphIndex) {
		switch(classDefTable.format) {
		case 1:
			if(classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {
				return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
			}
			return 0;
		case 2:
			var range = this.searchRange(classDefTable.ranges,glyphIndex);
			if(range != null) {
				return range.value;
			} else {
				return 0;
			}
			break;
		}
		return -1;
	}
	,getCoverageIndex: function(coverageTable,glyphIndex) {
		switch(coverageTable.format) {
		case 1:
			var index = this.binSearch(coverageTable.glyphs,glyphIndex);
			if(index >= 0) {
				return index;
			} else {
				return -1;
			}
			break;
		case 2:
			var range = this.searchRange(coverageTable.ranges,glyphIndex);
			if(range != null) {
				return range.value + glyphIndex - range.start;
			} else {
				return -1;
			}
			break;
		default:
			return null;
		}
	}
	,__class__: opentype_Layout
};
var opentype_OpenType = function() { };
opentype_OpenType.__name__ = "opentype.OpenType";
opentype_OpenType.loadFromFile = function(path,loaded,error) {
	if(sys_FileSystem.exists(path)) {
		try {
			var bytes = opentype_OpenType.loadFromFileSync(path);
			loaded(bytes);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			error(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
		}
	} else {
		error("Loading font failed!. " + path + " was not found!");
	}
};
opentype_OpenType.loadFromFileSync = function(path) {
	var bytes = js_node_buffer__$Buffer_Helper.bytesOfBuffer(js_node_Fs.readFileSync(path));
	return bytes;
};
opentype_OpenType.parseOpenTypeTableEntries = function(data,numTables) {
	var tableEntries = [];
	var p = 12;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var tag = opentype_Parser.getTag(data,p);
		var position = p + 4;
		if(position == null) {
			position = 0;
		}
		var position1 = position;
		if(position1 == null) {
			position1 = 0;
		}
		var ch1 = data.b[position1];
		var position2 = position + 1;
		if(position2 == null) {
			position2 = 0;
		}
		var ch2 = data.b[position2];
		var position3 = position + 2;
		if(position3 == null) {
			position3 = 0;
		}
		var ch3 = data.b[position3];
		var position4 = position + 3;
		if(position4 == null) {
			position4 = 0;
		}
		var ch4 = data.b[position4];
		var checksum = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		var position5 = p + 8;
		if(position5 == null) {
			position5 = 0;
		}
		var position6 = position5;
		if(position6 == null) {
			position6 = 0;
		}
		var ch11 = data.b[position6];
		var position7 = position5 + 1;
		if(position7 == null) {
			position7 = 0;
		}
		var ch21 = data.b[position7];
		var position8 = position5 + 2;
		if(position8 == null) {
			position8 = 0;
		}
		var ch31 = data.b[position8];
		var position9 = position5 + 3;
		if(position9 == null) {
			position9 = 0;
		}
		var ch41 = data.b[position9];
		var offset = ch41 | ch31 << 8 | ch21 << 16 | ch11 << 24;
		var position10 = p + 12;
		if(position10 == null) {
			position10 = 0;
		}
		var position11 = position10;
		if(position11 == null) {
			position11 = 0;
		}
		var ch12 = data.b[position11];
		var position12 = position10 + 1;
		if(position12 == null) {
			position12 = 0;
		}
		var ch22 = data.b[position12];
		var position13 = position10 + 2;
		if(position13 == null) {
			position13 = 0;
		}
		var ch32 = data.b[position13];
		var position14 = position10 + 3;
		if(position14 == null) {
			position14 = 0;
		}
		var ch42 = data.b[position14];
		var length = ch42 | ch32 << 8 | ch22 << 16 | ch12 << 24;
		tableEntries.push(new opentype_TableEntry(tag,checksum,offset,length,opentype_Compression.None,null));
		p += 16;
	}
	return tableEntries;
};
opentype_OpenType.parseWOFFTableEntries = function(data,numTables) {
	var tableEntries = [];
	var p = 44;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var tag = opentype_Parser.getTag(data,p);
		var position = p + 4;
		if(position == null) {
			position = 0;
		}
		var position1 = position;
		if(position1 == null) {
			position1 = 0;
		}
		var ch1 = data.b[position1];
		var position2 = position + 1;
		if(position2 == null) {
			position2 = 0;
		}
		var ch2 = data.b[position2];
		var position3 = position + 2;
		if(position3 == null) {
			position3 = 0;
		}
		var ch3 = data.b[position3];
		var position4 = position + 3;
		if(position4 == null) {
			position4 = 0;
		}
		var ch4 = data.b[position4];
		var offset = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		var position5 = p + 8;
		if(position5 == null) {
			position5 = 0;
		}
		var position6 = position5;
		if(position6 == null) {
			position6 = 0;
		}
		var ch11 = data.b[position6];
		var position7 = position5 + 1;
		if(position7 == null) {
			position7 = 0;
		}
		var ch21 = data.b[position7];
		var position8 = position5 + 2;
		if(position8 == null) {
			position8 = 0;
		}
		var ch31 = data.b[position8];
		var position9 = position5 + 3;
		if(position9 == null) {
			position9 = 0;
		}
		var ch41 = data.b[position9];
		var compLength = ch41 | ch31 << 8 | ch21 << 16 | ch11 << 24;
		var position10 = p + 12;
		if(position10 == null) {
			position10 = 0;
		}
		var position11 = position10;
		if(position11 == null) {
			position11 = 0;
		}
		var ch12 = data.b[position11];
		var position12 = position10 + 1;
		if(position12 == null) {
			position12 = 0;
		}
		var ch22 = data.b[position12];
		var position13 = position10 + 2;
		if(position13 == null) {
			position13 = 0;
		}
		var ch32 = data.b[position13];
		var position14 = position10 + 3;
		if(position14 == null) {
			position14 = 0;
		}
		var ch42 = data.b[position14];
		var origLength = ch42 | ch32 << 8 | ch22 << 16 | ch12 << 24;
		var compression;
		if(compLength < origLength) {
			compression = opentype_Compression.Woff;
		} else {
			compression = opentype_Compression.None;
		}
		tableEntries.push(new opentype_TableEntry(tag,-1,offset,origLength,compression,compLength));
		p += 20;
	}
	return tableEntries;
};
opentype_OpenType.uncompressTable = function(data,tableEntry) {
	if(tableEntry.compression == opentype_Compression.Woff) {
		var dest = new haxe_io_Bytes(new ArrayBuffer(tableEntry.length));
		var data1 = data.b;
		var src = js_node_buffer_Buffer.from(data1.buffer,data1.byteOffset,data.length).slice(tableEntry.offset + 2);
		var data2 = dest.b;
		var dst = js_node_buffer_Buffer.from(data2.buffer,data2.byteOffset,dest.length);
		var res = js_node_Zlib.inflateRawSync(src,{ info : true}).buffer;
		dst.set(res,0);
		return new opentype_Table(dest,0);
	} else {
		return new opentype_Table(data,tableEntry.offset);
	}
};
opentype_OpenType.parse = function(data) {
	var indexToLocFormat = -1;
	var ltagTable;
	var font = new opentype_Font();
	var bi = new haxe_io_BytesInput(data);
	bi.set_bigEndian(true);
	data = bi.readAll();
	var numTables;
	var tableEntries = [];
	var signature = opentype_Parser.getTag(data,0);
	if(signature == opentype_BytesHelper.fromCharCodes([0,1,0,0]) || signature == "true" || signature == "typ1") {
		font.outlinesFormat = opentype_Flavor.Ttf;
		var position = 4;
		if(position == null) {
			position = 0;
		}
		var first = data.b[position];
		var second = data.b[position + 1];
		numTables = first * 256 + second;
		tableEntries = opentype_OpenType.parseOpenTypeTableEntries(data,numTables);
	} else if(signature == "wOFF") {
		var flavor = opentype_Parser.getTag(data,4);
		if(flavor == opentype_BytesHelper.fromCharCodes([0,1,0,0])) {
			font.outlinesFormat = opentype_Flavor.Ttf;
		} else {
			throw new js__$Boot_HaxeError("Unsupported OpenType flavor " + signature);
		}
		var position1 = 12;
		if(position1 == null) {
			position1 = 0;
		}
		var first1 = data.b[position1];
		var second1 = data.b[position1 + 1];
		numTables = first1 * 256 + second1;
		tableEntries = opentype_OpenType.parseWOFFTableEntries(data,numTables);
	} else {
		throw new js__$Boot_HaxeError("Unsupported OpenType signature " + signature);
	}
	var cffTableEntry;
	var fvarTableEntry;
	var glyfTableEntry = null;
	var gdefTableEntry;
	var gposTableEntry = null;
	var gsubTableEntry;
	var hmtxTableEntry = null;
	var kernTableEntry = null;
	var locaTableEntry = null;
	var nameTableEntry;
	var metaTableEntry;
	var p;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var tableEntry = tableEntries[i];
		var table;
		switch(tableEntry.tag) {
		case "GPOS":
			gposTableEntry = tableEntry;
			break;
		case "cmap":
			table = opentype_OpenType.uncompressTable(data,tableEntry);
			font.tables.cmap = opentype_tables_Cmap.parse(table.data,table.offset);
			font.encoding = new opentype_CmapEncoding(font.tables.cmap);
			break;
		case "glyf":
			glyfTableEntry = tableEntry;
			break;
		case "head":
			table = opentype_OpenType.uncompressTable(data,tableEntry);
			font.tables.head = opentype_tables_Head.parse(table.data,table.offset);
			font.unitsPerEm = font.tables.head.unitsPerEm;
			indexToLocFormat = font.tables.head.indexToLocFormat;
			break;
		case "hmtx":
			hmtxTableEntry = tableEntry;
			break;
		case "kern":
			kernTableEntry = tableEntry;
			break;
		case "loca":
			locaTableEntry = tableEntry;
			break;
		case "maxp":
			table = opentype_OpenType.uncompressTable(data,tableEntry);
			font.tables.maxp = opentype_tables_Maxp.parse(table.data,table.offset);
			font.numGlyphs = font.tables.maxp.numGlyphs;
			break;
		}
	}
	if(glyfTableEntry != null && locaTableEntry != null) {
		var shortVersion = indexToLocFormat == 0;
		var locaTable = opentype_OpenType.uncompressTable(data,locaTableEntry);
		var loca = opentype_tables_Loca.parse(locaTable.data,locaTable.offset,font.numGlyphs,shortVersion);
		var glyfTable = opentype_OpenType.uncompressTable(data,glyfTableEntry);
		font.glyphs = opentype_tables_GlyphTable.parse(glyfTable.data,glyfTable.offset,loca.glyphOffsets,font,false);
	}
	var hmtxTable = opentype_OpenType.uncompressTable(data,hmtxTableEntry);
	opentype_tables_Hmtx.parse(hmtxTable.data,hmtxTable.offset,font);
	opentype_Encoding.addGlyphNames(font,false);
	if(kernTableEntry != null) {
		var kernTable = opentype_OpenType.uncompressTable(data,kernTableEntry);
		font.kerningPairs = opentype_tables_Kern.parse(kernTable.data,kernTable.offset).pairs;
	} else {
		font.kerningPairs = null;
	}
	if(gposTableEntry != null) {
		var gposTable = opentype_OpenType.uncompressTable(data,gposTableEntry);
		font.tables.set_gpos(opentype_tables_Gpos.parse(gposTable.data,gposTable.offset));
		font.position.init();
	}
	return font;
};
var opentype_Pair = function(value1,value2) {
	this.value1 = value1;
	this.value2 = value2;
};
opentype_Pair.__name__ = "opentype.Pair";
opentype_Pair.prototype = {
	__class__: opentype_Pair
};
var opentype_Parser = function(data,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.data = data;
	this.offset = offset;
	this.relativeOffset = 0;
};
opentype_Parser.__name__ = "opentype.Parser";
opentype_Parser.byte = function(p) {
	return p.parseByte();
};
opentype_Parser.char = function(p) {
	return p.parseChar();
};
opentype_Parser.uShort = function(p) {
	return p.parseUShort();
};
opentype_Parser.short = function(p) {
	return p.parseShort();
};
opentype_Parser.tag = function(p) {
	return p.parseTag();
};
opentype_Parser.uShortList = function(p) {
	return p.parseUShortList();
};
opentype_Parser.recordListOfLength = function(p,count,recordDescription) {
	return p.parseRecordListOfLength(count,recordDescription);
};
opentype_Parser.recordList = function(recordDescription) {
	return function(p) {
		return p.parseRecordList(recordDescription);
	};
};
opentype_Parser.coverage = function(parser) {
	return parser.parseCoverage();
};
opentype_Parser.classDef = function(p) {
	return p.parseClassDef();
};
opentype_Parser.getTag = function(data,offset) {
	var tag = "";
	var _g = offset;
	var _g1 = offset + 4;
	while(_g < _g1) {
		var i = _g++;
		var position = i;
		if(position == null) {
			position = 0;
		}
		var position1 = position;
		if(position1 == null) {
			position1 = 0;
		}
		var n = data.b[position1];
		var code = n >= 128 ? n - 256 : n;
		tag += String.fromCodePoint(code);
	}
	return tag;
};
opentype_Parser.prototype = {
	parseByte: function() {
		var position = this.offset + this.relativeOffset++;
		if(position == null) {
			position = 0;
		}
		return this.data.b[position];
	}
	,parseChar: function() {
		var position = this.offset + this.relativeOffset++;
		if(position == null) {
			position = 0;
		}
		var position1 = position;
		if(position1 == null) {
			position1 = 0;
		}
		var n = this.data.b[position1];
		if(n >= 128) {
			return n - 256;
		} else {
			return n;
		}
	}
	,parseUShort: function() {
		var bytes = this.data;
		var position = this.offset + this.relativeOffset;
		if(position == null) {
			position = 0;
		}
		var first = bytes.b[position];
		var second = bytes.b[position + 1];
		var v = first * 256 + second;
		this.relativeOffset += 2;
		return v;
	}
	,parseShort: function() {
		var bytes = this.data;
		var position = this.offset + this.relativeOffset;
		var position1 = position;
		if(position1 == null) {
			position1 = 0;
		}
		var ch1 = bytes.b[position1];
		var position2 = position + 1;
		if(position2 == null) {
			position2 = 0;
		}
		var ch2 = bytes.b[position2];
		var n = ch2 | ch1 << 8;
		var v = (n & 32768) != 0 ? n - 65536 : n;
		this.relativeOffset += 2;
		return v;
	}
	,parseULong: function() {
		var p = this.data;
		var position = this.offset + this.relativeOffset;
		if(position == null) {
			position = 0;
		}
		var position1 = position;
		if(position1 == null) {
			position1 = 0;
		}
		var ch1 = p.b[position1];
		var position2 = position + 1;
		if(position2 == null) {
			position2 = 0;
		}
		var ch2 = p.b[position2];
		var position3 = position + 2;
		if(position3 == null) {
			position3 = 0;
		}
		var ch3 = p.b[position3];
		var position4 = position + 3;
		if(position4 == null) {
			position4 = 0;
		}
		var ch4 = p.b[position4];
		var v = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		this.relativeOffset += 4;
		return v;
	}
	,parseFixed: function() {
		var v = opentype_BytesHelper.getFixed(this.data,this.offset + this.relativeOffset);
		this.relativeOffset += 4;
		return v;
	}
	,parseString: function(length) {
		var offset = this.offset + this.relativeOffset;
		var string = "";
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var position = offset + i;
			if(position == null) {
				position = 0;
			}
			var code = this.data.b[position];
			string += String.fromCodePoint(code);
		}
		this.relativeOffset += length;
		return string;
	}
	,parseTag: function() {
		return this.parseString(4);
	}
	,parseLongDateTime: function() {
		var p = this.data;
		var position = this.offset + this.relativeOffset + 4;
		if(position == null) {
			position = 0;
		}
		var position1 = position;
		if(position1 == null) {
			position1 = 0;
		}
		var ch1 = p.b[position1];
		var position2 = position + 1;
		if(position2 == null) {
			position2 = 0;
		}
		var ch2 = p.b[position2];
		var position3 = position + 2;
		if(position3 == null) {
			position3 = 0;
		}
		var ch3 = p.b[position3];
		var position4 = position + 3;
		if(position4 == null) {
			position4 = 0;
		}
		var ch4 = p.b[position4];
		var v = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		v -= 2082844800;
		this.relativeOffset += 8;
		return v;
	}
	,parseVersion: function(minorBase) {
		if(minorBase == null) {
			minorBase = 4096;
		}
		var bytes = this.data;
		var position = this.offset + this.relativeOffset;
		if(position == null) {
			position = 0;
		}
		var first = bytes.b[position];
		var second = bytes.b[position + 1];
		var major = first * 256 + second;
		var bytes1 = this.data;
		var position1 = this.offset + this.relativeOffset + 2;
		if(position1 == null) {
			position1 = 0;
		}
		var first1 = bytes1.b[position1];
		var second1 = bytes1.b[position1 + 1];
		var minor = first1 * 256 + second1;
		this.relativeOffset += 4;
		return major + minor / minorBase / 10;
	}
	,skip: function(offset,amount) {
		if(amount == null) {
			amount = 1;
		}
		this.relativeOffset += offset * amount;
	}
	,skipULong: function(amount) {
		if(amount == null) {
			amount = 1;
		}
		this.skip(opentype_Parser.typeOffsetULong,amount);
	}
	,skipUShort: function(amount) {
		if(amount == null) {
			amount = 1;
		}
		this.skip(opentype_Parser.typeOffsetUShort,amount);
	}
	,parseUShortList: function() {
		return this.parseUShortListOfLength(this.parseUShort());
	}
	,parseUShortListOfLength: function(count) {
		var _g = [];
		var _g1 = 0;
		var _g2 = count;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parseUShort());
		}
		return _g;
	}
	,parseList: function(parseFn) {
		return this.parseListOfLength(this.parseUShort(),parseFn);
	}
	,parseListOfLength: function(count,parseFn) {
		var _g = [];
		var _g1 = 0;
		var _g2 = count;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(parseFn());
		}
		return _g;
	}
	,parseRecordListOfLength: function(count,recordDescription) {
		var records = [];
		records.length = count;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var pairs = [];
			var _g2 = 0;
			while(_g2 < recordDescription.length) {
				var f = recordDescription[_g2];
				++_g2;
				var rec = new opentype_Record(f.name,f.parseFn(this));
				pairs.push(rec);
			}
			records[i] = pairs;
		}
		return records;
	}
	,parseRecordList: function(recordDescription) {
		return this.parseRecordListOfLength(this.parseUShort(),recordDescription);
	}
	,parseRecordListOfSameType: function(names,valueParser) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < names.length) {
			var name = names[_g1];
			++_g1;
			_g.push(new opentype_RecordDescription(name,valueParser));
		}
		return this.parseRecordList(_g);
	}
	,parseValueRecord: function() {
		return this.parseValueRecordOfFormat(this.parseUShort());
	}
	,parseValueRecordOfFormat: function(valueFormat) {
		if(valueFormat == 0) {
			return null;
		}
		var valueRecord = new opentype_tables_ValueRecord();
		if((valueFormat & 1) != 0) {
			valueRecord.xPlacement = this.parseShort();
		}
		if((valueFormat & 2) != 0) {
			valueRecord.yPlacement = this.parseShort();
		}
		if((valueFormat & 4) != 0) {
			valueRecord.xAdvance = this.parseShort();
		}
		if((valueFormat & 8) != 0) {
			valueRecord.yAdvance = this.parseShort();
		}
		if((valueFormat & 16) != 0) {
			this.parseShort();
		}
		if((valueFormat & 32) != 0) {
			this.parseShort();
		}
		if((valueFormat & 64) != 0) {
			this.parseShort();
		}
		if((valueFormat & 128) != 0) {
			this.parseShort();
		}
		return valueRecord;
	}
	,parseValueRecordList: function() {
		var valueFormat = this.parseUShort();
		var valueCount = this.parseUShort();
		var _g = [];
		var _g1 = 0;
		var _g2 = valueCount;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parseValueRecordOfFormat(valueFormat));
		}
		return _g;
	}
	,parsePointer: function() {
		var pointerOffset = this.parseUShort();
		if(pointerOffset > 0) {
			return new opentype_Parser(this.data,this.offset + pointerOffset);
		}
		return null;
	}
	,parseListOfLists: function(itemCallback) {
		var offsets = this.parseUShortList();
		var count = offsets.length;
		var relativeOffset = this.relativeOffset;
		var list = [];
		list.length = count;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var start = offsets[i];
			if(start == 0) {
				list[i] = null;
				continue;
			}
			this.relativeOffset = start;
			var subOffsets = this.parseUShortList();
			var subList = [];
			subList.length = subOffsets.length;
			var _g2 = [];
			var _g11 = 0;
			var _g21 = subOffsets.length;
			while(_g11 < _g21) {
				var j = _g11++;
				this.relativeOffset = start + subOffsets[j];
				_g2.push(subList[j] = itemCallback());
			}
			var subList1 = _g2;
			list[i] = subList1;
		}
		this.relativeOffset = relativeOffset;
		return list;
	}
	,parseListOfListsOfUShort: function() {
		var offsets = this.parseUShortList();
		var relativeOffset = this.relativeOffset;
		var _g = [];
		var _g1 = 0;
		var _g2 = offsets.length;
		while(_g1 < _g2) {
			var i = _g1++;
			this.relativeOffset = offsets[i];
			_g.push(this.parseUShortList());
		}
		var list = _g;
		this.relativeOffset = relativeOffset;
		return list;
	}
	,parseCoverage: function() {
		var startOffset = this.offset + this.relativeOffset;
		var format = this.parseUShort();
		var count = this.parseUShort();
		if(format == 1) {
			return new opentype_tables_subtables_Coverage(1,[],this.parseUShortListOfLength(count));
		} else if(format == 2) {
			var _g = [];
			var _g1 = 0;
			var _g2 = count;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(new opentype_tables_subtables_RangeRecord(this.parseUShort(),this.parseUShort(),this.parseUShort()));
			}
			return new opentype_tables_subtables_Coverage(2,_g,[]);
		}
		throw new js__$Boot_HaxeError("" + StringTools.hex(startOffset) + ": Coverage format must be 1 or 2.");
	}
	,parseClassDef: function() {
		var startOffset = this.offset + this.relativeOffset;
		var format = this.parseUShort();
		if(format == 1) {
			return new opentype_tables_subtables_ClassDefinition(1,this.parseUShort(),this.parseUShortList(),null);
		} else if(format == 2) {
			var recordList = this.parseRecordListOfSameType(["start","end","classId"],opentype_Parser.uShort);
			var _g = [];
			var _g1 = 0;
			while(_g1 < recordList.length) {
				var r = recordList[_g1];
				++_g1;
				_g.push(new opentype_tables_subtables_RangeRecord(r[0].value,r[1].value,r[2].value));
			}
			return new opentype_tables_subtables_ClassDefinition(2,null,null,_g);
		}
		throw new js__$Boot_HaxeError("" + StringTools.hex(startOffset) + ": ClassDef format must be 1 or 2.");
	}
	,parseScriptList: function() {
		var p = this.parsePointer();
		if(p != null) {
			return p.parseElements(function(p1) {
				return new opentype_tables_ScriptRecord(p1.parseTag(),p1.parseAtPointer(function(p2) {
					return new opentype_tables_Script(p2.parseAtPointer(function(p3) {
						return new opentype_tables_LangSys(p3.parseUShort(),p3.parseUShort(),p3.parseUShortList());
					}),p2.parseElements(function(p4) {
						return new opentype_tables_LangSysRecord(p4.parseTag(),p4.parseAtPointer(function(p5) {
							return new opentype_tables_LangSys(p5.parseUShort(),p5.parseUShort(),p5.parseUShortList());
						}));
					}));
				}));
			});
		} else {
			return [];
		}
	}
	,parseElements: function(parseFn) {
		return this.parseNElements(this.parseUShort(),parseFn);
	}
	,parseNElements: function(count,parseFn) {
		var _g = [];
		var _g1 = 0;
		var _g2 = count;
		while(_g1 < _g2) {
			var c = _g1++;
			_g.push(parseFn(this));
		}
		return _g;
	}
	,parseFeatureList: function() {
		var p = this.parsePointer();
		if(p != null) {
			return p.parseElements($bind(this,this.featureTable));
		} else {
			return [];
		}
	}
	,featureTable: function(p) {
		return new opentype_tables_FeatureTable(p.parseTag(),p.parseAtPointer($bind(this,this.feature)));
	}
	,feature: function(p) {
		return new opentype_tables_Feature(p.parseUShort(),p.parseUShortList());
	}
	,parseAtPointer: function(parseFn) {
		var p = this.parsePointer();
		if(p != null) {
			return parseFn(p);
		} else {
			return null;
		}
	}
	,parseLookupList: function(lookupTableParsers) {
		var p = this.parsePointer();
		if(p == null) {
			return [];
		}
		return p.parseList(function() {
			return p.parseAtPointer(function(p1) {
				var lookupType = p1.parseUShort();
				opentype_Check.assert(1 <= lookupType && lookupType <= 9,"GPOS/GSUB lookup type " + lookupType + " unknown.");
				var lookupFlag = p1.parseUShort();
				var useMarkFilteringSet = lookupFlag & 16;
				var tmp = p1.parseList(function() {
					return p1.parseAtPointer(lookupTableParsers[lookupType]);
				});
				var tmp1 = useMarkFilteringSet > 0 ? p1.parseUShort() : useMarkFilteringSet;
				return new opentype_tables_LookupTable(lookupType,lookupFlag,tmp,tmp1);
			});
		});
	}
	,__class__: opentype_Parser
};
var opentype_Record = function(name,value) {
	this.name = name;
	this.value = value;
};
opentype_Record.__name__ = "opentype.Record";
opentype_Record.prototype = {
	__class__: opentype_Record
};
var opentype_RecordDescription = function(name,parseFn) {
	this.name = name;
	this.parseFn = parseFn;
};
opentype_RecordDescription.__name__ = "opentype.RecordDescription";
opentype_RecordDescription.prototype = {
	__class__: opentype_RecordDescription
};
var opentype_Path = function() {
};
opentype_Path.__name__ = "opentype.Path";
opentype_Path.prototype = {
	__class__: opentype_Path
};
var opentype_Position = function(font) {
	opentype_Layout.call(this,font,"gpos");
};
opentype_Position.__name__ = "opentype.Position";
opentype_Position.__super__ = opentype_Layout;
opentype_Position.prototype = $extend(opentype_Layout.prototype,{
	hasKerningTables: function() {
		return this.defaultKerningTables != null;
	}
	,init: function() {
		var script = this.getDefaultScriptName();
		this.defaultKerningTables = this.getKerningTables(script,null);
	}
	,getKerningValue: function(leftIndex,rightIndex) {
		return this.getKerningValueForLookups(this.defaultKerningTables,leftIndex,rightIndex);
	}
	,getKerningValueForLookups: function(kerningLookups,leftIndex,rightIndex) {
		var _g = 0;
		var _g1 = kerningLookups.length;
		while(_g < _g1) {
			var i = _g++;
			var subtables = kerningLookups[i].subTables;
			var _g2 = 0;
			var _g11 = subtables.length;
			_hx_loop2: while(_g2 < _g11) {
				var j = _g2++;
				var subtable = subtables[j];
				var covIndex = this.getCoverageIndex(subtable.coverage,leftIndex);
				if(covIndex < 0) {
					continue;
				}
				switch(subtable.posFormat) {
				case 1:
					var pairSet = subtable.pairSets[covIndex];
					var _g3 = 0;
					var _g12 = pairSet.length;
					while(_g3 < _g12) {
						var k = _g3++;
						var pair = pairSet[k];
						if(pair.secondGlyph == rightIndex) {
							if(pair.value1 != null) {
								return pair.value1.xAdvance;
							} else {
								return 0;
							}
						}
					}
					break _hx_loop2;
				case 2:
					var class1 = this.getGlyphClass(subtable.classDef1,leftIndex);
					var class2 = this.getGlyphClass(subtable.classDef2,rightIndex);
					var pair1 = subtable.classRecords[class1][class2];
					if(pair1.value1 != null) {
						return pair1.value1.xAdvance;
					} else {
						return 0;
					}
					break;
				}
			}
		}
		return 0;
	}
	,getKerningTables: function(script,language) {
		if(this.font.tables.gpos != null) {
			return this.getLookupTables(script,language,"kern",2,false);
		}
		return null;
	}
	,__class__: opentype_Position
});
var opentype_Table = function(data,offset) {
	this.data = data;
	this.offset = offset;
};
opentype_Table.__name__ = "opentype.Table";
opentype_Table.prototype = {
	__class__: opentype_Table
};
var opentype_TableEntry = function(tag,checksum,offset,length,compression,compressedLength) {
	this.tag = tag;
	this.checksum = checksum;
	this.offset = offset;
	this.length = length;
	this.compression = compression;
	this.compressedLength = compressedLength;
};
opentype_TableEntry.__name__ = "opentype.TableEntry";
opentype_TableEntry.prototype = {
	__class__: opentype_TableEntry
};
var opentype_tables_Cmap = function() {
	this.groupCount = 0;
	this.format = 0;
	this.numTables = 0;
	this.version = -1;
	this.glyphIndexMap = new haxe_ds_IntMap();
};
opentype_tables_Cmap.__name__ = "opentype.tables.Cmap";
opentype_tables_Cmap.parse = function(data,position) {
	if(position == null) {
		position = 0;
	}
	return opentype_tables_Cmap.parseCmapTable(data,position);
};
opentype_tables_Cmap.parseCmapTableFormat12 = function(cmap,p) {
	p.parseUShort();
	cmap.length = p.parseULong();
	cmap.language = p.parseULong();
	var groupCount = p.parseULong();
	cmap.groupCount = groupCount;
	cmap.glyphIndexMap = new haxe_ds_IntMap();
	var _g = 0;
	var _g1 = groupCount;
	while(_g < _g1) {
		var i = _g++;
		var startCharCode = p.parseULong();
		var endCharCode = p.parseULong();
		var startGlyphId = p.parseULong();
		var _g2 = startCharCode;
		var _g11 = endCharCode;
		while(_g2 < _g11) {
			var c = _g2++;
			cmap.glyphIndexMap.h[c] = startGlyphId;
			++startGlyphId;
		}
	}
};
opentype_tables_Cmap.parseCmapTableFormat4 = function(cmap,p,data,start,offset) {
	cmap.length = p.parseUShort();
	cmap.language = p.parseUShort();
	var segCount = p.parseUShort() >> 1;
	cmap.segCount = segCount;
	p.skipUShort(3);
	cmap.glyphIndexMap = new haxe_ds_IntMap();
	var endCountParser = new opentype_Parser(data,start + offset + 14);
	var startCountParser = new opentype_Parser(data,start + offset + 16 + segCount * 2);
	var idDeltaParser = new opentype_Parser(data,start + offset + 16 + segCount * 4);
	var idRangeOffsetParser = new opentype_Parser(data,start + offset + 16 + segCount * 6);
	var glyphIndexOffset = start + offset + 16 + segCount * 8;
	var _g = 0;
	var _g1 = segCount - 1;
	while(_g < _g1) {
		var i = _g++;
		var glyphIndex;
		var endCount = endCountParser.parseUShort();
		var startCount = startCountParser.parseUShort();
		var idDelta = idDeltaParser.parseShort();
		var idRangeOffset = idRangeOffsetParser.parseUShort();
		var _g2 = startCount;
		var _g11 = endCount + 1;
		while(_g2 < _g11) {
			var c = _g2++;
			if(idRangeOffset != 0) {
				glyphIndexOffset = idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;
				glyphIndexOffset += idRangeOffset;
				var position = glyphIndexOffset += (c - startCount) * 2;
				if(position == null) {
					position = 0;
				}
				var first = data.b[position];
				var second = data.b[position + 1];
				glyphIndex = first * 256 + second;
				if(glyphIndex != 0) {
					glyphIndex = glyphIndex + idDelta & 65535;
				}
			} else {
				glyphIndex = c + idDelta & 65535;
			}
			cmap.glyphIndexMap.h[c] = glyphIndex;
		}
	}
};
opentype_tables_Cmap.parseCmapTable = function(data,start) {
	var cmap = new opentype_tables_Cmap();
	var position = start;
	if(position == null) {
		position = 0;
	}
	var first = data.b[position];
	var second = data.b[position + 1];
	cmap.version = first * 256 + second;
	opentype_Check.assert(cmap.version == 0,"cmap table version should be 0.");
	var position1 = start + 2;
	if(position1 == null) {
		position1 = 0;
	}
	var first1 = data.b[position1];
	var second1 = data.b[position1 + 1];
	cmap.numTables = first1 * 256 + second1;
	var offset = -1;
	var i = cmap.numTables - 1;
	while(i-- >= 0) {
		var position2 = start + 4 + i * 8;
		if(position2 == null) {
			position2 = 0;
		}
		var first2 = data.b[position2];
		var second2 = data.b[position2 + 1];
		var platformId = first2 * 256 + second2;
		var position3 = start + 4 + i * 8 + 2;
		if(position3 == null) {
			position3 = 0;
		}
		var first3 = data.b[position3];
		var second3 = data.b[position3 + 1];
		var encodingId = first3 * 256 + second3;
		if(platformId == 3 && (encodingId == 0 || encodingId == 1 || encodingId == 10) || platformId == 0 && (encodingId == 0 || encodingId == 1 || encodingId == 2 || encodingId == 3 || encodingId == 4)) {
			var position4 = start + 4 + i * 8 + 4;
			if(position4 == null) {
				position4 = 0;
			}
			var position5 = position4;
			if(position5 == null) {
				position5 = 0;
			}
			var ch1 = data.b[position5];
			var position6 = position4 + 1;
			if(position6 == null) {
				position6 = 0;
			}
			var ch2 = data.b[position6];
			var position7 = position4 + 2;
			if(position7 == null) {
				position7 = 0;
			}
			var ch3 = data.b[position7];
			var position8 = position4 + 3;
			if(position8 == null) {
				position8 = 0;
			}
			var ch4 = data.b[position8];
			offset = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
			break;
		}
	}
	if(offset == -1) {
		throw new js__$Boot_HaxeError("No valid cmap sub-tables found.");
	}
	var p = new opentype_Parser(data,start + offset);
	cmap.format = p.parseUShort();
	if(cmap.format == 12) {
		opentype_tables_Cmap.parseCmapTableFormat12(cmap,p);
	} else if(cmap.format == 4) {
		opentype_tables_Cmap.parseCmapTableFormat4(cmap,p,data,start,offset);
	} else {
		throw new js__$Boot_HaxeError("Only format 4 and 12 cmap tables are supported (found format " + cmap.format + ").");
	}
	return cmap;
};
opentype_tables_Cmap.prototype = {
	__class__: opentype_tables_Cmap
};
var opentype_tables_FeatureTable = function(tag,feature) {
	this.tag = tag;
	this.feature = feature;
};
opentype_tables_FeatureTable.__name__ = "opentype.tables.FeatureTable";
opentype_tables_FeatureTable.prototype = {
	__class__: opentype_tables_FeatureTable
};
var opentype_tables_Feature = function(featureParams,lookupListIndexes) {
	this.featureParams = featureParams;
	this.lookupListIndexes = lookupListIndexes;
};
opentype_tables_Feature.__name__ = "opentype.tables.Feature";
opentype_tables_Feature.prototype = {
	__class__: opentype_tables_Feature
};
var opentype_tables_GlyphTable = function() {
};
opentype_tables_GlyphTable.__name__ = "opentype.tables.GlyphTable";
opentype_tables_GlyphTable.parse = function(data,position,glyphOffsets,font,lowMemory) {
	if(position == null) {
		position = 0;
	}
	var p = new opentype_Parser(data,position);
	var glyph = new opentype_tables_GlyphTable();
	if(lowMemory) {
		throw new js__$Boot_HaxeError("Low memory mode not implemented");
	} else {
		return opentype_tables_GlyphTable.parseGlyfTableAll(data,position,glyphOffsets,font);
	}
};
opentype_tables_GlyphTable.parseGlyfTableAll = function(data,start,glyphOffsets,font) {
	var glyphs = new opentype_GlyphSet(font);
	var _g = 0;
	var _g1 = glyphOffsets.length - 1;
	while(_g < _g1) {
		var i = _g++;
		var offset = glyphOffsets[i];
		var nextOffset = glyphOffsets[i + 1];
		if(offset != nextOffset) {
			glyphs.addGlyphLoader(i,opentype_GlyphSet.ttfGlyphLoader(font,i,data,start + offset));
		} else {
			glyphs.addGlyphLoader(i,opentype_GlyphSet.glyphLoader(font,i));
		}
	}
	return glyphs;
};
opentype_tables_GlyphTable.prototype = {
	__class__: opentype_tables_GlyphTable
};
var opentype_tables_IScriptTable = function() { };
opentype_tables_IScriptTable.__name__ = "opentype.tables.IScriptTable";
opentype_tables_IScriptTable.__isInterface__ = true;
opentype_tables_IScriptTable.prototype = {
	__class__: opentype_tables_IScriptTable
};
var opentype_tables_subtables_ILookup = function() { };
opentype_tables_subtables_ILookup.__name__ = "opentype.tables.subtables.ILookup";
opentype_tables_subtables_ILookup.__isInterface__ = true;
opentype_tables_subtables_ILookup.prototype = {
	__class__: opentype_tables_subtables_ILookup
};
var opentype_tables_subtables_Lookup = function() {
};
opentype_tables_subtables_Lookup.__name__ = "opentype.tables.subtables.Lookup";
opentype_tables_subtables_Lookup.__interfaces__ = [opentype_tables_subtables_ILookup];
opentype_tables_subtables_Lookup.prototype = {
	__class__: opentype_tables_subtables_Lookup
};
var opentype_tables_subtables_PairSet = function(secondGlyph,value1,value2) {
	this.secondGlyph = secondGlyph;
	this.value1 = value1;
	this.value2 = value2;
};
opentype_tables_subtables_PairSet.__name__ = "opentype.tables.subtables.PairSet";
opentype_tables_subtables_PairSet.prototype = {
	__class__: opentype_tables_subtables_PairSet
};
var opentype_tables_Gpos = function() {
	this.features = [];
	this.lookups = [];
	this.scripts = [];
	this.version = -1;
};
opentype_tables_Gpos.__name__ = "opentype.tables.Gpos";
opentype_tables_Gpos.__interfaces__ = [opentype_tables_ILayoutTable,opentype_tables_IScriptTable];
opentype_tables_Gpos.error = function(p) {
	return null;
};
opentype_tables_Gpos.parse = function(data,position) {
	if(position == null) {
		position = 0;
	}
	return opentype_tables_Gpos.parseGposTable(data,position);
};
opentype_tables_Gpos.parseLookup1 = function(p) {
	var start = p.offset + p.relativeOffset;
	var res = new opentype_tables_subtables_Lookup();
	res.posFormat = p.parseUShort();
	opentype_Check.assert(res.posFormat == 1 || res.posFormat == 2,"" + StringTools.hex(start) + " : GPOS lookup type 1 format must be 1 or 2.");
	res.coverage = p.parsePointer().parseCoverage();
	if(res.posFormat == 1) {
		res.value = p.parseValueRecord();
	} else if(res.posFormat == 2) {
		res.values = p.parseValueRecordList();
	}
	return res;
};
opentype_tables_Gpos.parseLookup2 = function(p) {
	var start = p.offset + p.relativeOffset;
	var res = new opentype_tables_subtables_Lookup();
	res.posFormat = p.parseUShort();
	opentype_Check.assert(res.posFormat == 1 || res.posFormat == 2,"" + StringTools.hex(start) + " + : GPOS lookup type 2 format must be 1 or 2.");
	res.coverage = p.parsePointer().parseCoverage();
	res.valueFormat1 = p.parseUShort();
	res.valueFormat2 = p.parseUShort();
	if(res.posFormat == 1) {
		res.pairSets = p.parseList(function() {
			return p.parseAtPointer(function(p1) {
				return p1.parseList(function() {
					return new opentype_tables_subtables_PairSet(p1.parseUShort(),p1.parseValueRecordOfFormat(res.valueFormat1),p1.parseValueRecordOfFormat(res.valueFormat2));
				});
			});
		});
	} else if(res.posFormat == 2) {
		res.classDef1 = p.parseAtPointer(opentype_Parser.classDef);
		res.classDef2 = p.parseAtPointer(opentype_Parser.classDef);
		res.classCount1 = p.parseUShort();
		res.classCount2 = p.parseUShort();
		res.classRecords = p.parseListOfLength(res.classCount1,function() {
			return p.parseListOfLength(res.classCount2,function() {
				var r = new opentype_Pair(p.parseValueRecordOfFormat(res.valueFormat1),p.parseValueRecordOfFormat(res.valueFormat2));
				return r;
			});
		});
	}
	return res;
};
opentype_tables_Gpos.parseGposTable = function(data,start) {
	if(start == null) {
		start = 0;
	}
	var p = new opentype_Parser(data,start);
	var tableVersion = p.parseVersion(1);
	if(tableVersion != 1 && tableVersion != 1.1) {
		throw new js__$Boot_HaxeError("Unsupported GPOS table version " + tableVersion);
	}
	var gpos = new opentype_tables_Gpos();
	gpos.version = tableVersion;
	gpos.scripts = p.parseScriptList();
	gpos.features = p.parseFeatureList();
	gpos.lookups = p.parseLookupList(opentype_tables_Gpos.subtableParsers);
	var tmp = tableVersion != 1;
	return gpos;
};
opentype_tables_Gpos.prototype = {
	__class__: opentype_tables_Gpos
};
var opentype_tables_Head = function() {
};
opentype_tables_Head.__name__ = "opentype.tables.Head";
opentype_tables_Head.parse = function(data,position) {
	if(position == null) {
		position = 0;
	}
	return opentype_tables_Head.parseHeadTable(data,position);
};
opentype_tables_Head.parseHeadTable = function(data,start) {
	var p = new opentype_Parser(data,start);
	var head = new opentype_tables_Head();
	head.version = p.parseVersion();
	head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
	head.checkSumAdjustment = p.parseULong();
	head.magicNumber = p.parseULong();
	opentype_Check.assert(head.magicNumber == 1594834165,"Font header has wrong magic number.");
	head.flags = p.parseUShort();
	head.unitsPerEm = p.parseUShort();
	head.created = p.parseLongDateTime();
	head.modified = p.parseLongDateTime();
	head.xMin = p.parseShort();
	head.yMin = p.parseShort();
	head.xMax = p.parseShort();
	head.yMax = p.parseShort();
	head.macStyle = p.parseUShort();
	head.lowestRecPPEM = p.parseUShort();
	head.fontDirectionHint = p.parseShort();
	head.indexToLocFormat = p.parseShort();
	head.glyphDataFormat = p.parseShort();
	return head;
};
opentype_tables_Head.prototype = {
	__class__: opentype_tables_Head
};
var opentype_tables_Hmtx = function() {
};
opentype_tables_Hmtx.__name__ = "opentype.tables.Hmtx";
opentype_tables_Hmtx.parse = function(data,position,font) {
	var p = new opentype_Parser(data,position);
	var hmtx = new opentype_tables_Hmtx();
	return hmtx;
};
opentype_tables_Hmtx.prototype = {
	parseHmtxTableAll: function(data,start,font) {
		var advanceWidth = 0;
		var leftSideBearing = 0;
		var p = new opentype_Parser(data,start);
		var _g = 0;
		var _g1 = font.numGlyphs;
		while(_g < _g1) {
			var i = _g++;
			if(i < font.numMetrics) {
				advanceWidth = p.parseUShort();
				leftSideBearing = p.parseShort();
			}
			var glyph = font.glyphs.get(i);
			glyph.advanceWidth = advanceWidth;
			glyph.leftSideBearing = leftSideBearing;
		}
	}
	,parseHmtxTableOnLowMemory: function(data,start,font) {
		font._hmtxTableData = [];
		var advanceWidth = 0;
		var leftSideBearing = 0;
		var p = new opentype_Parser(data,start);
		var _g = 0;
		var _g1 = font.numGlyphs;
		while(_g < _g1) {
			var i = _g++;
			if(i < font.numMetrics) {
				advanceWidth = p.parseUShort();
				leftSideBearing = p.parseShort();
			}
			font._hmtxTableData[i] = new opentype_HorizontalMetrics(advanceWidth,leftSideBearing);
		}
	}
	,parseHmtxTable: function(data,start,font,lowMemory) {
		if(lowMemory) {
			this.parseHmtxTableOnLowMemory(data,start,font);
		} else {
			this.parseHmtxTableAll(data,start,font);
		}
	}
	,__class__: opentype_tables_Hmtx
};
var opentype_tables_ITag = function() { };
opentype_tables_ITag.__name__ = "opentype.tables.ITag";
opentype_tables_ITag.__isInterface__ = true;
opentype_tables_ITag.prototype = {
	__class__: opentype_tables_ITag
};
var opentype_tables_Kern = function() {
	this.pairs = new haxe_ds_StringMap();
};
opentype_tables_Kern.__name__ = "opentype.tables.Kern";
opentype_tables_Kern.parse = function(data,position) {
	var kern = new opentype_tables_Kern();
	var p = new opentype_Parser(data,position);
	var tableVersion = p.parseUShort();
	if(tableVersion == 0) {
		kern.pairs = opentype_tables_Kern.parseWindowsKernTable(p);
	} else if(tableVersion == 1) {
		kern.pairs = opentype_tables_Kern.parseMacKernTable(p);
	} else {
		throw new js__$Boot_HaxeError("Unsupported kern table version (\"" + tableVersion + "\"");
	}
	return kern;
};
opentype_tables_Kern.parseWindowsKernTable = function(p) {
	var pairs = new haxe_ds_StringMap();
	p.skipUShort();
	var subtableVersion = p.parseUShort();
	opentype_Check.assert(subtableVersion == 0,"Unsupported kern sub-table version. \"" + subtableVersion + "\"");
	p.skipUShort(2);
	var nPairs = p.parseUShort();
	p.skipUShort(3);
	var _g = 0;
	var _g1 = nPairs;
	while(_g < _g1) {
		var i = _g++;
		var leftIndex = p.parseUShort();
		var rightIndex = p.parseUShort();
		var value = p.parseShort();
		var key = leftIndex + "," + rightIndex;
		if(__map_reserved[key] != null) {
			pairs.setReserved(key,value);
		} else {
			pairs.h[key] = value;
		}
	}
	return pairs;
};
opentype_tables_Kern.parseMacKernTable = function(p) {
	var pairs = new haxe_ds_StringMap();
	p.skipUShort();
	var nTables = p.parseULong();
	var tmp = nTables > 1;
	p.skipULong();
	var coverage = p.parseUShort();
	var subtableVersion = coverage & 255;
	p.skipUShort();
	if(subtableVersion == 0) {
		var nPairs = p.parseUShort();
		p.skipUShort(3);
		var _g = 0;
		var _g1 = nPairs;
		while(_g < _g1) {
			var i = _g++;
			var leftIndex = p.parseUShort();
			var rightIndex = p.parseUShort();
			var value = p.parseShort();
			var key = leftIndex + "," + rightIndex;
			if(__map_reserved[key] != null) {
				pairs.setReserved(key,value);
			} else {
				pairs.h[key] = value;
			}
		}
	}
	return pairs;
};
opentype_tables_Kern.prototype = {
	__class__: opentype_tables_Kern
};
var opentype_tables_LangSys = function(reserved,reqFeatureIndex,featureIndexes) {
	this.reserved = reserved;
	this.reqFeatureIndex = reqFeatureIndex;
	this.featureIndexes = featureIndexes;
};
opentype_tables_LangSys.__name__ = "opentype.tables.LangSys";
opentype_tables_LangSys.prototype = {
	__class__: opentype_tables_LangSys
};
var opentype_tables_LangSysRecord = function(tag,langSys) {
	this.tag = tag;
	this.langSys = langSys;
};
opentype_tables_LangSysRecord.__name__ = "opentype.tables.LangSysRecord";
opentype_tables_LangSysRecord.__interfaces__ = [opentype_tables_ITag];
opentype_tables_LangSysRecord.prototype = {
	__class__: opentype_tables_LangSysRecord
};
var opentype_tables_Loca = function() {
};
opentype_tables_Loca.__name__ = "opentype.tables.Loca";
opentype_tables_Loca.parse = function(data,position,numGlyphs,shortVersion) {
	return opentype_tables_Loca.parseLocaTable(data,position,numGlyphs,shortVersion);
};
opentype_tables_Loca.parseLocaTable = function(data,start,numGlyphs,shortVersion) {
	var p = new opentype_Parser(data,start);
	var loca = new opentype_tables_Loca();
	var parseFn = shortVersion ? $bind(p,p.parseUShort) : $bind(p,p.parseULong);
	loca.glyphOffsets = [];
	var _g = 0;
	var _g1 = numGlyphs + 1;
	while(_g < _g1) {
		var i = _g++;
		var glyphOffset = parseFn();
		if(shortVersion) {
			glyphOffset *= 2;
		}
		loca.glyphOffsets.push(glyphOffset);
	}
	return loca;
};
opentype_tables_Loca.prototype = {
	__class__: opentype_tables_Loca
};
var opentype_tables_LookupTable = function(lookupType,lookupFlag,subTables,markFilteringSet) {
	this.lookupType = lookupType;
	this.lookupFlag = lookupFlag;
	this.subTables = subTables;
	this.markFilteringSet = markFilteringSet;
};
opentype_tables_LookupTable.__name__ = "opentype.tables.LookupTable";
opentype_tables_LookupTable.prototype = {
	__class__: opentype_tables_LookupTable
};
var opentype_tables_Maxp = function() {
};
opentype_tables_Maxp.__name__ = "opentype.tables.Maxp";
opentype_tables_Maxp.parse = function(data,position) {
	if(position == null) {
		position = 0;
	}
	return opentype_tables_Maxp.parseMaxpTable(data,position);
};
opentype_tables_Maxp.parseMaxpTable = function(data,start) {
	var maxp = new opentype_tables_Maxp();
	var p = new opentype_Parser(data,start);
	maxp.version = p.parseVersion();
	maxp.numGlyphs = p.parseUShort();
	if(maxp.version == 1.0) {
		maxp.maxPoints = p.parseUShort();
		maxp.maxContours = p.parseUShort();
		maxp.maxCompositePoints = p.parseUShort();
		maxp.maxCompositeContours = p.parseUShort();
		maxp.maxZones = p.parseUShort();
		maxp.maxTwilightPoints = p.parseUShort();
		maxp.maxStorage = p.parseUShort();
		maxp.maxFunctionDefs = p.parseUShort();
		maxp.maxInstructionDefs = p.parseUShort();
		maxp.maxStackElements = p.parseUShort();
		maxp.maxSizeOfInstructions = p.parseUShort();
		maxp.maxComponentElements = p.parseUShort();
		maxp.maxComponentDepth = p.parseUShort();
	}
	return maxp;
};
opentype_tables_Maxp.prototype = {
	__class__: opentype_tables_Maxp
};
var opentype_tables_Script = function(defaultLangSys,langSysRecords) {
	this.defaultLangSys = defaultLangSys;
	this.langSysRecords = langSysRecords;
};
opentype_tables_Script.__name__ = "opentype.tables.Script";
opentype_tables_Script.prototype = {
	__class__: opentype_tables_Script
};
var opentype_tables_ScriptRecord = function(tag,script) {
	this.tag = tag;
	this.script = script;
};
opentype_tables_ScriptRecord.__name__ = "opentype.tables.ScriptRecord";
opentype_tables_ScriptRecord.__interfaces__ = [opentype_tables_ITag];
opentype_tables_ScriptRecord.prototype = {
	__class__: opentype_tables_ScriptRecord
};
var opentype_tables_Tables = function() {
	this.layoutTables = new haxe_ds_StringMap();
};
opentype_tables_Tables.__name__ = "opentype.tables.Tables";
opentype_tables_Tables.prototype = {
	set_gpos: function(gpos) {
		var _this = this.layoutTables;
		if(__map_reserved["gpos"] != null) {
			_this.setReserved("gpos",gpos);
		} else {
			_this.h["gpos"] = gpos;
		}
		return this.gpos = gpos;
	}
	,__class__: opentype_tables_Tables
	,__properties__: {set_gpos:"set_gpos"}
};
var opentype_tables_ValueRecord = function() {
};
opentype_tables_ValueRecord.__name__ = "opentype.tables.ValueRecord";
opentype_tables_ValueRecord.prototype = {
	__class__: opentype_tables_ValueRecord
};
var opentype_tables_subtables_ClassDefinition = function(format,startGlyph,classes,ranges) {
	this.format = format;
	this.startGlyph = startGlyph != null ? startGlyph : -1;
	this.classes = classes != null ? classes : [];
	this.ranges = ranges != null ? ranges : [];
};
opentype_tables_subtables_ClassDefinition.__name__ = "opentype.tables.subtables.ClassDefinition";
opentype_tables_subtables_ClassDefinition.prototype = {
	__class__: opentype_tables_subtables_ClassDefinition
};
var opentype_tables_subtables_Coverage = function(format,ranges,glyphs) {
	this.format = format;
	this.ranges = ranges;
	this.glyphs = glyphs;
};
opentype_tables_subtables_Coverage.__name__ = "opentype.tables.subtables.Coverage";
opentype_tables_subtables_Coverage.prototype = {
	__class__: opentype_tables_subtables_Coverage
};
var opentype_tables_subtables_IRecord = function() { };
opentype_tables_subtables_IRecord.__name__ = "opentype.tables.subtables.IRecord";
opentype_tables_subtables_IRecord.__isInterface__ = true;
opentype_tables_subtables_IRecord.prototype = {
	__class__: opentype_tables_subtables_IRecord
};
var opentype_tables_subtables_RangeRecord = function(start,end,value) {
	this.start = start;
	this.end = end;
	this.value = value;
};
opentype_tables_subtables_RangeRecord.__name__ = "opentype.tables.subtables.RangeRecord";
opentype_tables_subtables_RangeRecord.__interfaces__ = [opentype_tables_subtables_IRecord];
opentype_tables_subtables_RangeRecord.prototype = {
	__class__: opentype_tables_subtables_RangeRecord
};
var promhx_base_AsyncBase = function(d) {
	this._resolved = false;
	this._pending = false;
	this._errorPending = false;
	this._fulfilled = false;
	this._update = [];
	this._error = [];
	this._errored = false;
	if(d != null) {
		var next = this;
		var f = function(x) {
			return x;
		};
		d._update.push({ async : next, linkf : function(x1) {
			var tmp = f(x1);
			next.handleResolve(tmp);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(d,next,f);
	}
};
promhx_base_AsyncBase.__name__ = "promhx.base.AsyncBase";
promhx_base_AsyncBase.link = function(current,next,f) {
	current._update.push({ async : next, linkf : function(x) {
		var tmp = f(x);
		next.handleResolve(tmp);
	}});
	promhx_base_AsyncBase.immediateLinkUpdate(current,next,f);
};
promhx_base_AsyncBase.immediateLinkUpdate = function(current,next,f) {
	if(current._errored && !current._errorPending && current._error.length <= 0) {
		next.handleError(current._errorVal);
	}
	if(current._resolved && !current._pending) {
		try {
			next.handleResolve(f(current._val));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			next.handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
		}
	}
};
promhx_base_AsyncBase.linkAll = function(all,next) {
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var a = $getIterator(all);
			while(a.hasNext()) {
				var a1 = a.next();
				_g.push(a1 == current ? v : a1._val);
			}
			var vals = _g;
			next.handleResolve(vals);
		}
		return;
	};
	var a2 = $getIterator(all);
	while(a2.hasNext()) {
		var a3 = a2.next();
		var a4 = a3._update;
		var f = [cthen];
		var _g1 = [];
		var a21 = $getIterator(all);
		while(a21.hasNext()) {
			var a22 = a21.next();
			if(a22 != a3) {
				_g1.push(a22);
			}
		}
		var tmp = (function(current1,arr1,f1) {
			return function(v1) {
				f1[0](arr1[0],current1[0],v1);
				return;
			};
		})([a3],[_g1],f);
		a4.push({ async : next, linkf : tmp});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var a5 = $getIterator(all);
		while(a5.hasNext()) {
			var a6 = a5.next();
			_g2.push(a6._val);
		}
		next.handleResolve(_g2);
	}
};
promhx_base_AsyncBase.pipeLink = function(current,ret,f) {
	var linked = false;
	var linkf = function(x) {
		if(!linked) {
			linked = true;
			var pipe_ret = f(x);
			pipe_ret._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
			promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret,function(x1) {
				return x1;
			});
		}
	};
	current._update.push({ async : ret, linkf : linkf});
	if(current._resolved && !current._pending) {
		try {
			linkf(current._val);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			ret.handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
		}
	}
};
promhx_base_AsyncBase.allResolved = function(as) {
	var a = $getIterator(as);
	while(a.hasNext()) {
		var a1 = a.next();
		if(!a1._resolved) {
			return false;
		}
	}
	return true;
};
promhx_base_AsyncBase.allFulfilled = function(as) {
	var a = $getIterator(as);
	while(a.hasNext()) {
		var a1 = a.next();
		if(!a1._fulfilled) {
			return false;
		}
	}
	return true;
};
promhx_base_AsyncBase.prototype = {
	catchError: function(f) {
		this._error.push(f);
		return this;
	}
	,errorThen: function(f) {
		this._errorMap = f;
		return this;
	}
	,isResolved: function() {
		return this._resolved;
	}
	,isErrored: function() {
		return this._errored;
	}
	,isErrorHandled: function() {
		return this._error.length > 0;
	}
	,isErrorPending: function() {
		return this._errorPending;
	}
	,isFulfilled: function() {
		return this._fulfilled;
	}
	,isPending: function() {
		return this._pending;
	}
	,handleResolve: function(val) {
		this._resolve(val);
	}
	,_resolve: function(val) {
		var _gthis = this;
		if(this._pending) {
			var f = $bind(this,this._resolve);
			var val1 = val;
			var tmp = function() {
				f(val1);
			};
			promhx_base_EventLoop.queue.add(tmp);
			promhx_base_EventLoop.continueOnNextLoop();
		} else {
			this._resolved = true;
			this._pending = true;
			promhx_base_EventLoop.queue.add(function() {
				_gthis._val = val;
				var _g = 0;
				var _g1 = _gthis._update;
				while(_g < _g1.length) {
					var up = _g1[_g];
					++_g;
					try {
						up.linkf(val);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						up.async.handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
					}
				}
				_gthis._fulfilled = true;
				_gthis._pending = false;
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,handleError: function(error) {
		this._handleError(error);
	}
	,_handleError: function(error) {
		var _gthis = this;
		var update_errors = function(e) {
			if(_gthis._error.length > 0) {
				var _g = 0;
				var _g1 = _gthis._error;
				while(_g < _g1.length) {
					var ef = _g1[_g];
					++_g;
					ef(e);
				}
			} else if(_gthis._update.length > 0) {
				var _g2 = 0;
				var _g11 = _gthis._update;
				while(_g2 < _g11.length) {
					var up = _g11[_g2];
					++_g2;
					up.async.handleError(e);
				}
			} else {
				haxe_Log.trace("Call Stack: " + haxe_CallStack.toString(haxe_CallStack.callStack()),{ fileName : "promhx/base/AsyncBase.hx", lineNumber : 192, className : "promhx.base.AsyncBase", methodName : "_handleError"});
				throw js__$Boot_HaxeError.wrap(e);
			}
			_gthis._errorPending = false;
		};
		if(!this._errorPending) {
			this._errorPending = true;
			this._errored = true;
			this._errorVal = error;
			promhx_base_EventLoop.queue.add(function() {
				if(_gthis._errorMap != null) {
					try {
						var tmp = _gthis._errorMap(error);
						_gthis._resolve(tmp);
					} catch( e1 ) {
						haxe_CallStack.lastException = e1;
						update_errors(((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1);
					}
				} else {
					update_errors(error);
				}
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,then: function(f) {
		var ret = new promhx_base_AsyncBase(null);
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			var tmp = f1(x);
			next.handleResolve(tmp);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		return ret;
	}
	,unlink: function(to) {
		var _gthis = this;
		promhx_base_EventLoop.queue.add(function() {
			var _g = [];
			var _g1 = 0;
			var _g2 = _gthis._update;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(v.async != to) {
					_g.push(v);
				}
			}
			_gthis._update = _g;
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,isLinked: function(to) {
		var updated = false;
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.async == to) {
				return true;
			}
		}
		return updated;
	}
	,__class__: promhx_base_AsyncBase
};
var promhx_Deferred = $hx_exports["promhx"]["Deferred"] = function() {
	promhx_base_AsyncBase.call(this);
};
promhx_Deferred.__name__ = "promhx.Deferred";
promhx_Deferred.__super__ = promhx_base_AsyncBase;
promhx_Deferred.prototype = $extend(promhx_base_AsyncBase.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,promise: function() {
		return new promhx_Promise(this);
	}
	,stream: function() {
		return new promhx_Stream(this);
	}
	,publicStream: function() {
		return new promhx_PublicStream(this);
	}
	,__class__: promhx_Deferred
});
var promhx_Promise = $hx_exports["promhx"]["Promise"] = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._rejected = false;
};
promhx_Promise.__name__ = "promhx.Promise";
promhx_Promise.whenAll = function(itb) {
	var ret = new promhx_Promise(null);
	var all = itb;
	var next = ret;
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var a = $getIterator(all);
			while(a.hasNext()) {
				var a1 = a.next();
				_g.push(a1 == current ? v : a1._val);
			}
			var vals = _g;
			next.handleResolve(vals);
		}
		return;
	};
	var a2 = $getIterator(all);
	while(a2.hasNext()) {
		var a3 = a2.next();
		var a4 = a3._update;
		var f = [cthen];
		var _g1 = [];
		var a21 = $getIterator(all);
		while(a21.hasNext()) {
			var a22 = a21.next();
			if(a22 != a3) {
				_g1.push(a22);
			}
		}
		var tmp = (function(current1,arr1,f1) {
			return function(v1) {
				f1[0](arr1[0],current1[0],v1);
				return;
			};
		})([a3],[_g1],f);
		a4.push({ async : next, linkf : tmp});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var a5 = $getIterator(all);
		while(a5.hasNext()) {
			var a6 = a5.next();
			_g2.push(a6._val);
		}
		next.handleResolve(_g2);
	}
	return ret;
};
promhx_Promise.promise = function(_val) {
	var ret = new promhx_Promise();
	ret.handleResolve(_val);
	return ret;
};
promhx_Promise.__super__ = promhx_base_AsyncBase;
promhx_Promise.prototype = $extend(promhx_base_AsyncBase.prototype,{
	isRejected: function() {
		return this._rejected;
	}
	,reject: function(e) {
		this._rejected = true;
		this.handleError(e);
	}
	,handleResolve: function(val) {
		if(this._resolved) {
			var msg = "Promise has already been resolved";
			throw new js__$Boot_HaxeError(promhx_error_PromiseError.AlreadyResolved(msg));
		}
		this._resolve(val);
	}
	,then: function(f) {
		var ret = new promhx_Promise(null);
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			var tmp = f1(x);
			next.handleResolve(tmp);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		return ret;
	}
	,unlink: function(to) {
		var _gthis = this;
		promhx_base_EventLoop.queue.add(function() {
			if(!_gthis._fulfilled) {
				var msg = "Downstream Promise is not fullfilled";
				_gthis.handleError(promhx_error_PromiseError.DownstreamNotFullfilled(msg));
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = _gthis._update;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v.async != to) {
						_g.push(v);
					}
				}
				_gthis._update = _g;
			}
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,handleError: function(error) {
		this._rejected = true;
		this._handleError(error);
	}
	,pipe: function(f) {
		var ret = new promhx_Promise(null);
		var ret1 = ret;
		var f1 = f;
		var linked = false;
		var linkf = function(x) {
			if(!linked) {
				linked = true;
				var pipe_ret = f1(x);
				pipe_ret._update.push({ async : ret1, linkf : $bind(ret1,ret1.handleResolve)});
				promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret1,function(x1) {
					return x1;
				});
			}
		};
		this._update.push({ async : ret1, linkf : linkf});
		if(this._resolved && !this._pending) {
			try {
				linkf(this._val);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				ret1.handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
			}
		}
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Promise();
		this.catchError(function(e) {
			var piped = f(e);
			piped.then($bind(ret,ret._resolve));
		});
		this.then($bind(ret,ret._resolve));
		return ret;
	}
	,__class__: promhx_Promise
});
var promhx_Stream = $hx_exports["promhx"]["Stream"] = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._end_promise = new promhx_Promise();
};
promhx_Stream.__name__ = "promhx.Stream";
promhx_Stream.foreach = function(itb) {
	var s = new promhx_Stream(null);
	var i = $getIterator(itb);
	while(i.hasNext()) {
		var i1 = i.next();
		s.handleResolve(i1);
	}
	s.end();
	return s;
};
promhx_Stream.wheneverAll = function(itb) {
	var ret = new promhx_Stream(null);
	var all = itb;
	var next = ret;
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var a = $getIterator(all);
			while(a.hasNext()) {
				var a1 = a.next();
				_g.push(a1 == current ? v : a1._val);
			}
			var vals = _g;
			next.handleResolve(vals);
		}
		return;
	};
	var a2 = $getIterator(all);
	while(a2.hasNext()) {
		var a3 = a2.next();
		var a4 = a3._update;
		var f = [cthen];
		var _g1 = [];
		var a21 = $getIterator(all);
		while(a21.hasNext()) {
			var a22 = a21.next();
			if(a22 != a3) {
				_g1.push(a22);
			}
		}
		var tmp = (function(current1,arr1,f1) {
			return function(v1) {
				f1[0](arr1[0],current1[0],v1);
				return;
			};
		})([a3],[_g1],f);
		a4.push({ async : next, linkf : tmp});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var a5 = $getIterator(all);
		while(a5.hasNext()) {
			var a6 = a5.next();
			_g2.push(a6._val);
		}
		next.handleResolve(_g2);
	}
	return ret;
};
promhx_Stream.concatAll = function(itb) {
	var ret = new promhx_Stream(null);
	var i = $getIterator(itb);
	while(i.hasNext()) {
		var i1 = i.next();
		ret.concat(i1);
	}
	return ret;
};
promhx_Stream.mergeAll = function(itb) {
	var ret = new promhx_Stream(null);
	var i = $getIterator(itb);
	while(i.hasNext()) {
		var i1 = i.next();
		ret.merge(i1);
	}
	return ret;
};
promhx_Stream.stream = function(_val) {
	var ret = new promhx_Stream(null);
	ret.handleResolve(_val);
	return ret;
};
promhx_Stream.__super__ = promhx_base_AsyncBase;
promhx_Stream.prototype = $extend(promhx_base_AsyncBase.prototype,{
	then: function(f) {
		var ret = new promhx_Stream(null);
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			var tmp = f1(x);
			next.handleResolve(tmp);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		this._end_promise._update.push({ async : ret._end_promise, linkf : function(x1) {
			ret.end();
		}});
		return ret;
	}
	,detachStream: function(str) {
		var filtered = [];
		var removed = false;
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.async == str) {
				var _g2 = [];
				var _g11 = 0;
				var _g21 = this._end_promise._update;
				while(_g11 < _g21.length) {
					var v = _g21[_g11];
					++_g11;
					if(v.async != str._end_promise) {
						_g2.push(v);
					}
				}
				this._end_promise._update = _g2;
				removed = true;
			} else {
				filtered.push(u);
			}
		}
		this._update = filtered;
		return removed;
	}
	,first: function() {
		var s = new promhx_Promise(null);
		this.then(function(x) {
			if(!s._resolved) {
				s.handleResolve(x);
			}
		});
		return s;
	}
	,handleResolve: function(val) {
		if(!this._end && !this._pause) {
			this._resolve(val);
		}
	}
	,pause: function(set) {
		if(set == null) {
			set = !this._pause;
		}
		this._pause = set;
	}
	,pipe: function(f) {
		var ret = new promhx_Stream(null);
		var ret1 = ret;
		var f1 = f;
		var linked = false;
		var linkf = function(x) {
			if(!linked) {
				linked = true;
				var pipe_ret = f1(x);
				pipe_ret._update.push({ async : ret1, linkf : $bind(ret1,ret1.handleResolve)});
				promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret1,function(x1) {
					return x1;
				});
			}
		};
		this._update.push({ async : ret1, linkf : linkf});
		if(this._resolved && !this._pending) {
			try {
				linkf(this._val);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				ret1.handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
			}
		}
		this._end_promise.then(function(x2) {
			ret.end();
		});
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Stream(null);
		this.catchError(function(e) {
			var piped = f(e);
			piped.then($bind(ret,ret._resolve));
			piped._end_promise.then(($_=ret._end_promise,$bind($_,$_._resolve)));
		});
		this.then($bind(ret,ret._resolve));
		this._end_promise.then(function(x) {
			ret.end();
		});
		return ret;
	}
	,handleEnd: function() {
		if(this._pending) {
			promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
			promhx_base_EventLoop.continueOnNextLoop();
		} else if(this._end_promise._resolved) {
			return;
		} else {
			this._end = true;
			var o = this._resolved ? haxe_ds_Option.Some(this._val) : haxe_ds_Option.None;
			this._end_promise.handleResolve(o);
			this._update = [];
			this._error = [];
		}
	}
	,end: function() {
		promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
		promhx_base_EventLoop.continueOnNextLoop();
		return this;
	}
	,endThen: function(f) {
		return this._end_promise.then(f);
	}
	,filter: function(f) {
		var ret = new promhx_Stream(null);
		this._update.push({ async : ret, linkf : function(x) {
			if(f(x)) {
				ret.handleResolve(x);
			}
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x1) {
			return x1;
		});
		return ret;
	}
	,concat: function(s) {
		var ret = new promhx_Stream(null);
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		this._end_promise.then(function(_) {
			s.pipe(function(x1) {
				ret.handleResolve(x1);
				return ret;
			});
			s._end_promise.then(function(_1) {
				ret.end();
			});
		});
		return ret;
	}
	,merge: function(s) {
		var ret = new promhx_Stream(null);
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		s._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		promhx_base_AsyncBase.immediateLinkUpdate(s,ret,function(x1) {
			return x1;
		});
		return ret;
	}
	,__class__: promhx_Stream
});
var promhx_PublicStream = $hx_exports["promhx"]["PublicStream"] = function(def) {
	promhx_Stream.call(this,def);
};
promhx_PublicStream.__name__ = "promhx.PublicStream";
promhx_PublicStream.publicstream = function(val) {
	var ps = new promhx_PublicStream(null);
	ps.handleResolve(val);
	return ps;
};
promhx_PublicStream.__super__ = promhx_Stream;
promhx_PublicStream.prototype = $extend(promhx_Stream.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,update: function(val) {
		this.handleResolve(val);
	}
	,__class__: promhx_PublicStream
});
var promhx_base_EventLoop = function() { };
promhx_base_EventLoop.__name__ = "promhx.base.EventLoop";
promhx_base_EventLoop.enqueue = function(eqf) {
	promhx_base_EventLoop.queue.add(eqf);
	promhx_base_EventLoop.continueOnNextLoop();
};
promhx_base_EventLoop.set_nextLoop = function(f) {
	if(promhx_base_EventLoop.nextLoop != null) {
		throw new js__$Boot_HaxeError("nextLoop has already been set");
	} else {
		promhx_base_EventLoop.nextLoop = f;
	}
	return promhx_base_EventLoop.nextLoop;
};
promhx_base_EventLoop.queueEmpty = function() {
	return promhx_base_EventLoop.queue.isEmpty();
};
promhx_base_EventLoop.finish = function(max_iterations) {
	if(max_iterations == null) {
		max_iterations = 1000;
	}
	var fn = null;
	while(true) {
		var tmp;
		if(max_iterations-- > 0) {
			fn = promhx_base_EventLoop.queue.pop();
			tmp = fn != null;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		fn();
	}
	return promhx_base_EventLoop.queue.isEmpty();
};
promhx_base_EventLoop.clear = function() {
	promhx_base_EventLoop.queue = new haxe_ds_List();
};
promhx_base_EventLoop.f = function() {
	var fn = promhx_base_EventLoop.queue.pop();
	if(fn != null) {
		fn();
	}
	if(!promhx_base_EventLoop.queue.isEmpty()) {
		promhx_base_EventLoop.continueOnNextLoop();
	}
};
promhx_base_EventLoop.continueOnNextLoop = function() {
	if(promhx_base_EventLoop.nextLoop != null) {
		promhx_base_EventLoop.nextLoop(promhx_base_EventLoop.f);
	} else {
		setImmediate(promhx_base_EventLoop.f);
	}
};
var promhx_error_PromiseError = $hxEnums["promhx.error.PromiseError"] = { __ename__ : true, __constructs__ : ["AlreadyResolved","DownstreamNotFullfilled"]
	,AlreadyResolved: ($_=function(message) { return {_hx_index:0,message:message,__enum__:"promhx.error.PromiseError",toString:$estr}; },$_.__params__ = ["message"],$_)
	,DownstreamNotFullfilled: ($_=function(message) { return {_hx_index:1,message:message,__enum__:"promhx.error.PromiseError",toString:$estr}; },$_.__params__ = ["message"],$_)
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = "sys.FileSystem";
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _ ) {
		haxe_CallStack.lastException = _;
		var _1 = ((_) instanceof js__$Boot_HaxeError) ? _.val : _;
		return false;
	}
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = "sys.io.FileInput";
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = "sys.io.FileOutput";
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = new js_node_buffer_Buffer(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__ : true, __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
var tables_GposTable = function() {
	var _gthis = this;
	buddy_BuddySuite.call(this);
	this.describe("tables/gpos.hx",buddy_TestFunc.Sync(function() {
		var tmp = buddy_TestFunc.Sync(function() {
			var data = "00010000 000A 000C 000E" + "0000" + "0000" + "0000";
			var res = opentype_tables_Gpos.parse(TestUtil.unhex(data));
			buddy_ShouldFloat.should(res.version).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 31, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(res.scripts).containExactly([],{ fileName : "tables/GposTable.hx", lineNumber : 32, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(res.features).containExactly([],{ fileName : "tables/GposTable.hx", lineNumber : 33, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(res.lookups).containExactly([],{ fileName : "tables/GposTable.hx", lineNumber : 34, className : "tables.GposTable", methodName : "new"});
		});
		_gthis.it("can parse a GPOS header",tmp,null,{ fileName : "tables/GposTable.hx", lineNumber : 24, className : "tables.GposTable", methodName : "new"});
		var tmp1 = buddy_TestFunc.Sync(function() {
			var data1 = TestUtil.unhex("00010000 0000 0000 0000");
			var gpos = opentype_tables_Gpos.parse(data1);
			buddy_ShouldFloat.should(gpos.version).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 39, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(gpos.scripts).containExactly([],{ fileName : "tables/GposTable.hx", lineNumber : 40, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(gpos.lookups).containExactly([],{ fileName : "tables/GposTable.hx", lineNumber : 41, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(gpos.features).containExactly([],{ fileName : "tables/GposTable.hx", lineNumber : 42, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(gpos.lookups).containExactly([],{ fileName : "tables/GposTable.hx", lineNumber : 43, className : "tables.GposTable", methodName : "new"});
		});
		_gthis.it("can parse a GPOS header with null pointers",tmp1,null,{ fileName : "tables/GposTable.hx", lineNumber : 36, className : "tables.GposTable", methodName : "new"});
		var tmp2 = buddy_TestFunc.Sync(function() {
			var data2 = "0001 0008 0002   FFB0 0002 0001   01B3 01BC 0000";
			var gpos1 = _gthis.parseLookup(1,data2);
			buddy_ShouldFloat.should(gpos1.posFormat).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 51, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos1.coverage.format).be(2,{ fileName : "tables/GposTable.hx", lineNumber : 52, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos1.coverage.ranges[0].start).be(435,{ fileName : "tables/GposTable.hx", lineNumber : 53, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos1.coverage.ranges[0].end).be(444,{ fileName : "tables/GposTable.hx", lineNumber : 54, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos1.coverage.ranges[0].value).be(0,{ fileName : "tables/GposTable.hx", lineNumber : 55, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos1.value.yPlacement).be(-80,{ fileName : "tables/GposTable.hx", lineNumber : 56, className : "tables.GposTable", methodName : "new"});
		});
		_gthis.it("can parse lookup1 SinglePosFormat1",tmp2,null,{ fileName : "tables/GposTable.hx", lineNumber : 47, className : "tables.GposTable", methodName : "new"});
		var tmp3 = buddy_TestFunc.Sync(function() {
			var data3 = "0001 000E 0099   0050 00D2 0018 0020   0002 0001 00C8 00D1 0000   000B 000F 0001 5540   000B 000F 0001 5540";
			var gpos2 = _gthis.parseLookup(1,data3);
			buddy_ShouldFloat.should(gpos2.posFormat).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 63, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos2.coverage.format).be(2,{ fileName : "tables/GposTable.hx", lineNumber : 64, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos2.coverage.ranges[0].start).be(200,{ fileName : "tables/GposTable.hx", lineNumber : 65, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos2.coverage.ranges[0].end).be(209,{ fileName : "tables/GposTable.hx", lineNumber : 66, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos2.coverage.ranges[0].value).be(0,{ fileName : "tables/GposTable.hx", lineNumber : 67, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos2.value.xPlacement).be(80,{ fileName : "tables/GposTable.hx", lineNumber : 68, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos2.value.yAdvance).be(210,{ fileName : "tables/GposTable.hx", lineNumber : 69, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos2.value.xPlaDevice).be(null,{ fileName : "tables/GposTable.hx", lineNumber : 70, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos2.value.yAdvDevice).be(null,{ fileName : "tables/GposTable.hx", lineNumber : 71, className : "tables.GposTable", methodName : "new"});
		});
		_gthis.it("can parse lookup1 SinglePosFormat1 with ValueFormat Table and ValueRecord",tmp3,null,{ fileName : "tables/GposTable.hx", lineNumber : 59, className : "tables.GposTable", methodName : "new"});
		var tmp4 = buddy_TestFunc.Sync(function() {
			var data4 = "0002 0014 0005 0003   0032 0032   0019 0019  000A 000A   0001 0003 004F 0125 0129";
			var gpos3 = _gthis.parseLookup(1,data4);
			buddy_ShouldFloat.should(gpos3.posFormat).be(2,{ fileName : "tables/GposTable.hx", lineNumber : 78, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos3.coverage.format).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 79, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(gpos3.coverage.glyphs).containExactly([79,293,297],{ fileName : "tables/GposTable.hx", lineNumber : 80, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos3.values[0].xPlacement).be(50,{ fileName : "tables/GposTable.hx", lineNumber : 81, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos3.values[0].xAdvance).be(50,{ fileName : "tables/GposTable.hx", lineNumber : 82, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos3.values[1].xPlacement).be(25,{ fileName : "tables/GposTable.hx", lineNumber : 83, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos3.values[1].xAdvance).be(25,{ fileName : "tables/GposTable.hx", lineNumber : 84, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos3.values[2].xPlacement).be(10,{ fileName : "tables/GposTable.hx", lineNumber : 85, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(gpos3.values[2].xAdvance).be(10,{ fileName : "tables/GposTable.hx", lineNumber : 86, className : "tables.GposTable", methodName : "new"});
		});
		_gthis.it("can parse lookup1 SinglePosFormat2",tmp4,null,{ fileName : "tables/GposTable.hx", lineNumber : 74, className : "tables.GposTable", methodName : "new"});
		var tmp5 = buddy_TestFunc.Sync(function() {
			var data5 = "0001 001E 0004 0001 0002 000E 0016   0001 0059 FFE2 FFEC 0001 0059 FFD8 FFE7   0001 0002 002D 0031";
			var lu2 = _gthis.parseLookup(2,data5);
			buddy_ShouldFloat.should(lu2.posFormat).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 95, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.coverage.format).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 96, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(lu2.coverage.glyphs).containExactly([45,49],{ fileName : "tables/GposTable.hx", lineNumber : 97, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.valueFormat1).be(4,{ fileName : "tables/GposTable.hx", lineNumber : 98, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.valueFormat2).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 99, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.pairSets[0][0].secondGlyph).be(89,{ fileName : "tables/GposTable.hx", lineNumber : 100, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.pairSets[0][0].value1.xAdvance).be(-30,{ fileName : "tables/GposTable.hx", lineNumber : 101, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.pairSets[0][0].value2.xPlacement).be(-20,{ fileName : "tables/GposTable.hx", lineNumber : 102, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.pairSets[1][0].secondGlyph).be(89,{ fileName : "tables/GposTable.hx", lineNumber : 103, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.pairSets[1][0].value1.xAdvance).be(-40,{ fileName : "tables/GposTable.hx", lineNumber : 104, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu2.pairSets[1][0].value2.xPlacement).be(-25,{ fileName : "tables/GposTable.hx", lineNumber : 105, className : "tables.GposTable", methodName : "new"});
		});
		_gthis.it("can parse lookup2 PairPosFormat1",tmp5,null,{ fileName : "tables/GposTable.hx", lineNumber : 90, className : "tables.GposTable", methodName : "new"});
		var tmp6 = buddy_TestFunc.Sync(function() {
			var data6 = "0002 0018 0004 0000 0022 0032 0002 0002 0000 0000 0000 FFCE   0001 0003 0046 0047 0049   0002 0002 0046 0047 0001 0049 0049 0001   0002 0001 006A 006B 0001";
			var lu21 = _gthis.parseLookup(2,data6);
			buddy_ShouldFloat.should(lu21.posFormat).be(2,{ fileName : "tables/GposTable.hx", lineNumber : 112, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.coverage.format).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 113, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldIterable.should(lu21.coverage.glyphs).containExactly([70,71,73],{ fileName : "tables/GposTable.hx", lineNumber : 114, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.valueFormat1).be(4,{ fileName : "tables/GposTable.hx", lineNumber : 115, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.valueFormat2).be(0,{ fileName : "tables/GposTable.hx", lineNumber : 116, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef1.format).be(2,{ fileName : "tables/GposTable.hx", lineNumber : 117, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef1.ranges[0].start).be(70,{ fileName : "tables/GposTable.hx", lineNumber : 118, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef1.ranges[0].end).be(71,{ fileName : "tables/GposTable.hx", lineNumber : 119, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef1.ranges[0].value).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 120, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef1.ranges[1].start).be(73,{ fileName : "tables/GposTable.hx", lineNumber : 121, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef1.ranges[1].end).be(73,{ fileName : "tables/GposTable.hx", lineNumber : 122, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef1.ranges[1].value).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 123, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef2.format).be(2,{ fileName : "tables/GposTable.hx", lineNumber : 124, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef2.ranges[0].start).be(106,{ fileName : "tables/GposTable.hx", lineNumber : 125, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef2.ranges[0].end).be(107,{ fileName : "tables/GposTable.hx", lineNumber : 126, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classDef2.ranges[0].value).be(1,{ fileName : "tables/GposTable.hx", lineNumber : 127, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classCount1).be(2,{ fileName : "tables/GposTable.hx", lineNumber : 128, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classCount2).be(2,{ fileName : "tables/GposTable.hx", lineNumber : 129, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classRecords[0][0].value1.xAdvance).be(0,{ fileName : "tables/GposTable.hx", lineNumber : 130, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldDynamic.should(lu21.classRecords[0][0].value2).be(null,{ fileName : "tables/GposTable.hx", lineNumber : 131, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classRecords[0][1].value1.xAdvance).be(0,{ fileName : "tables/GposTable.hx", lineNumber : 132, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldDynamic.should(lu21.classRecords[0][1].value2).be(null,{ fileName : "tables/GposTable.hx", lineNumber : 133, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classRecords[1][0].value1.xAdvance).be(0,{ fileName : "tables/GposTable.hx", lineNumber : 134, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldDynamic.should(lu21.classRecords[1][0].value2).be(null,{ fileName : "tables/GposTable.hx", lineNumber : 135, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldFloat.should(lu21.classRecords[1][1].value1.xAdvance).be(-50,{ fileName : "tables/GposTable.hx", lineNumber : 136, className : "tables.GposTable", methodName : "new"});
			buddy_ShouldDynamic.should(lu21.classRecords[1][1].value2).be(null,{ fileName : "tables/GposTable.hx", lineNumber : 137, className : "tables.GposTable", methodName : "new"});
		});
		_gthis.it("can parse lookup2 PairPosFormat2",tmp6,null,{ fileName : "tables/GposTable.hx", lineNumber : 108, className : "tables.GposTable", methodName : "new"});
	}));
};
tables_GposTable.__name__ = "tables.GposTable";
tables_GposTable.__super__ = buddy_BuddySuite;
tables_GposTable.prototype = $extend(buddy_BuddySuite.prototype,{
	parseLookup: function(lookupType,subTableData) {
		var data = "00010000 000A 000C 000E" + "0000" + "0000" + "0001 0004" + "000" + lookupType + "0000 0001 0008" + subTableData;
		return opentype_tables_Gpos.parse(TestUtil.unhex(data)).lookups[0].subTables[0];
	}
	,__class__: tables_GposTable
});
var tables_LocaTable = function() {
	var _gthis = this;
	buddy_BuddySuite.call(this);
	this.describe("tables/Loca.hx",buddy_TestFunc.Sync(function() {
		var tmp = buddy_TestFunc.Sync(function() {
			var data = TestUtil.unhex("DEAD BEEF 0010 0100 80CE");
			var loca = opentype_tables_Loca.parse(data,4,2,true);
			buddy_ShouldIterable.should(loca.glyphOffsets).containExactly([32,512,65948],{ fileName : "tables/LocaTable.hx", lineNumber : 13, className : "tables.LocaTable", methodName : "new"});
		});
		_gthis.it("can parse the short version",tmp,null,{ fileName : "tables/LocaTable.hx", lineNumber : 10, className : "tables.LocaTable", methodName : "new"});
		var tmp1 = buddy_TestFunc.Sync(function() {
			var data1 = TestUtil.unhex("DEADBEEF 00000010 00000100 ABCD5678");
			var loca1 = opentype_tables_Loca.parse(data1,4,2,false);
			buddy_ShouldIterable.should(loca1.glyphOffsets).containExactly([16,256,-1412606344],{ fileName : "tables/LocaTable.hx", lineNumber : 19, className : "tables.LocaTable", methodName : "new"});
		});
		_gthis.it("can parse the long version",tmp1,null,{ fileName : "tables/LocaTable.hx", lineNumber : 16, className : "tables.LocaTable", methodName : "new"});
	}));
};
tables_LocaTable.__name__ = "tables.LocaTable";
tables_LocaTable.__super__ = buddy_BuddySuite;
tables_LocaTable.prototype = $extend(buddy_BuddySuite.prototype,{
	__class__: tables_LocaTable
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Main.__meta__ = { obj : { colorize : null}};
buddy_BuddySuite.useDefaultTrace = false;
buddy_reporting__$TraceReporter_Color_$Impl_$.Default = 39;
buddy_reporting__$TraceReporter_Color_$Impl_$.Red = 31;
buddy_reporting__$TraceReporter_Color_$Impl_$.Yellow = 33;
buddy_reporting__$TraceReporter_Color_$Impl_$.Green = 32;
buddy_reporting__$TraceReporter_Color_$Impl_$.White = 37;
buddy_tests_SelfTest.lastSpec = new buddy_Spec("No spec","No filename");
buddy_tests_SelfTest.lastSuite = new buddy_Suite("No suite");
opentype_Parser.typeOffsetByte = 1;
opentype_Parser.typeOffsetUShort = 2;
opentype_Parser.typeOffsetShort = 2;
opentype_Parser.typeOffsetULong = 4;
opentype_Parser.typeOffsetFixed = 4;
opentype_Parser.typeOffsetLongDateTime = 8;
opentype_Parser.typeOffsetTag = 4;
opentype_tables_Gpos.subtableParsers = [null,opentype_tables_Gpos.parseLookup1,opentype_tables_Gpos.parseLookup2,opentype_tables_Gpos.error,opentype_tables_Gpos.error,opentype_tables_Gpos.error,opentype_tables_Gpos.error,opentype_tables_Gpos.error,opentype_tables_Gpos.error,opentype_tables_Gpos.error];
promhx_base_EventLoop.queue = new haxe_ds_List();
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
